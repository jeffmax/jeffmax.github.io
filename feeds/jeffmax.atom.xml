<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jeffmax's blog - jeffmax</title><link href="http://jeffmax.io/" rel="alternate"></link><link href="http://jeffmax.io/feeds/jeffmax.atom.xml" rel="self"></link><id>http://jeffmax.io/</id><updated>2018-09-01T10:20:00+02:00</updated><entry><title>Tips for R's data.table</title><link href="http://jeffmax.io/tips-for-rs-datatable.html" rel="alternate"></link><published>2018-09-01T10:20:00+02:00</published><updated>2018-09-01T10:20:00+02:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2018-09-01:/tips-for-rs-datatable.html</id><summary type="html">&lt;p&gt;Learn to use the data.table library in R&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction to data.table&lt;/h2&gt;
&lt;p&gt;data.table is an extension of R's data.frame for working with large datasets. At the expense of a more complex syntax, data.table provides an efficient framework for filtering and manipulating large, multi-table, in-memory datasets. Major features include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fast import of csv files via &lt;a href="https://www.rdocumentation.org/packages/data.table/versions/1.11.4/topics/fread"&gt;fread()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fast and flexible joining separate data.tables via keys&lt;/li&gt;
&lt;li&gt;Support for assignment by reference.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of re-hashing an introduction here, I would suggest reading the &lt;a href="https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html"&gt;intro vignette in the data.table&lt;/a&gt; documentation. &lt;/p&gt;
&lt;h3&gt;Other useful data.table links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf"&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rdatatable/data.table/wiki"&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rawgit.com/wiki/Rdatatable/data.table/vignettes/datatable-faq.html"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://brooksandrew.github.io/simpleblog/articles/advanced-data-table/"&gt;Advanced data table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;data.table notes&lt;/h2&gt;
&lt;h3&gt;Joins&lt;/h3&gt;
&lt;h4&gt;Joins as Subsetting&lt;/h4&gt;
&lt;p&gt;When first using data.table, I kept referring to the this &lt;a href="https://rstudio-pubs-static.s3.amazonaws.com/52230_5ae0d25125b544caab32f75f0360e775.html"&gt;guide&lt;/a&gt; to remember how to do inner joins and outer joins. However, the main idea behind joins in data.table is to treat them as a type of subsetting, and if you embrace this idea, it will become clearer.  Let's assume we have two data.tables, X and Y, and for simplicity's sake, we will assume that we have setkey on both of them.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X[Y, nomatch=NA]
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;nomatch=NA is the default, so this would be the same as leaving it off &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Take the subset of X, where X's key column's values match Y's key column's values. If there is a set of key values in Y with no corresponding value match in X (like a KeyError in Python), fill in that row's X's columns with NA. This is the same as Y outer join X.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X[Y, nomatch=0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take the subset of X, where X's key columns values match Y's key columns values. If there is a set of key values in Y with no corresponding value match in X, do not include the Y or X row. This is the same as Y inner join X (or X inner join Y).&lt;/p&gt;
&lt;h4&gt;Non-equi joins&lt;/h4&gt;
&lt;p&gt;By default, the type of join you typically do is an "equi-join" which just means that you join on key columns with values that are "equal".  Sometimes this is not ideal, especially if you are doing a join with something other than an auto-incremeted primary key (or other &lt;a href="https://en.wikipedia.org/wiki/Surrogate_key"&gt;surrogate key&lt;/a&gt;). In other words, if the key you are joining on has some kind of natural meaning (like a timestamp), it might make sense to join on all rows with a time key that is greater or less than your primary key. This could end up saving you a large &lt;a href="https://en.wikipedia.org/wiki/Cartesian_product"&gt;cartesian join&lt;/a&gt; followed by a subsetting. In fact, this might not be just a matter of convenience- if your data is big enough, you may not have enough memory for the cartesian join. &lt;/p&gt;
&lt;p&gt;The data.table documention refers to non-equi joins and rolling joins (described below) as distinct concepts, but in reality, rolling joins are just one type of non-equi join.&lt;/p&gt;
&lt;h5&gt;Rolling join&lt;/h5&gt;
&lt;p&gt;A rolling join allows you to do join two tables with keys that are not necessarily an exact match, but are within a certain threshold of one another. That is, you can join on a "rolling" window of values. For example, if the primary key for X is 1, and the primary key value for Y is 2, a rolling join could be set up to connect these two rows. This is especially useful for joining two tables on timestamps. Perhaps you want to join table A with the key in table B that comes as close as possiible (or within certain amount of time after) the primary key in table A.  If you are using multi-field keys, the last field that you specify is always used as the rolling field.&lt;/p&gt;
&lt;h5&gt;Other non-equi joins&lt;/h5&gt;
&lt;p&gt;There is another syntax, using the "on" keyword, to do arbitrary non-equi joins using the &amp;gt; , &amp;lt;, &amp;lt;=, and &amp;gt;= operators (as well as, I believe the range keyword). This is not well documented, but is discussed around page 6 of the official &lt;a href="https://cran.r-project.org/web/packages/data.table/data.table.pdf"&gt;data.table documentation&lt;/a&gt;.  I have tested this, and it works well and appears to be quite fast. One note is that the values in the comparisons must be column names- you cannot specify arbitrary functions inside of the &lt;code&gt;on&lt;/code&gt; vector. This means you likely need to make some temporary columns on your tables.  &lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;on&lt;/code&gt; keyword technically defines &lt;a href="https://cran.r-project.org/web/packages/data.table/vignettes/datatable-secondary-indices-and-auto-indexing.html"&gt;data.table secondary indices&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Self joins&lt;/h4&gt;
&lt;p&gt;There is nothing special about a self join, it is just joining a table to itself. You might want to join rows in the same table to one another, and you can do that. Just be aware, as with any join that has two tables with conflicting column names, data.table will rename the conflicting column names of the table you index by (in the i position) by prefacing the column names with "i.".&lt;/p&gt;
&lt;h4&gt;.EACHI joins&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;.EACHI&lt;/code&gt; is a value that you can set the &lt;code&gt;by&lt;/code&gt; keyword to that changes the way a your J clause works in a join. It used to be the default behavior when you were merging two tables while using an aggregate value (like .N) in your J clause, but now you have to specify that you want this behavior (called by-without-by). The best explanation for this is this answer on &lt;a href="https://stackoverflow.com/a/27004566/134930"&gt;Stack Overflow&lt;/a&gt;.  In general, I have found this useful for situations where you would typically need to perform a cartesian join, followed by a grouping with code in J to further select. Or, similarly, using nested for loops to examine all the rows in one table for each row in the another table . X[Y, ,by=.EACHI] effectively lets your perform your J clause (and return a row or rows) for each row in Y, along with all the rows in X that match Y's key.&lt;/p&gt;
&lt;p&gt;Also, see this &lt;a href="http://ethen8181.github.io/machine-learning/R/data_table/data_table.html#selecting-parts-of-a-filtered-group"&gt;Good explanation of .EACHI&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Other Topics&lt;/h3&gt;
&lt;h4&gt;Common Tasks&lt;/h4&gt;
&lt;h5&gt;Creating an Index element/primary key&lt;/h5&gt;
&lt;p&gt;&lt;a href="#.I"&gt;See &lt;code&gt;.I&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Find the largest/smallest item of a group&lt;/h5&gt;
&lt;p&gt;&lt;a href="#.I"&gt;See &lt;code&gt;.I&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Fill/copy down a column&lt;/h5&gt;
&lt;p&gt;If you need to copy/fill down to fill in NA's between defined values, there is a method based on grouping by the cumsum of the is.NA value of the column. See &lt;a href="https://stackoverflow.com/questions/18840628/fill-rows-downward-for-a-column-with-nas-with-r-base-or-data-table"&gt;here&lt;/a&gt;. This is can be pretty useful for performing "lookbacks" on values on rows in a table. It is also pretty trivial to do individual fill downs for subgroups in the table by creating an extra colum on the table containing the value of cumsum calculation after grouping by the variable of concern. &lt;/p&gt;
&lt;h5&gt;Grouping  commands with &lt;code&gt;{}&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;From &lt;a href="http://brooksandrew.github.io/simpleblog/articles/advanced-data-table/"&gt;Advanced data table&lt;/a&gt;-  this is apparently not really special to data.table, but in the J position of data.table you can group commands, including creating temporary variables. The last line of the block should be a list containing the variables you want to actually return from the selection.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;DT&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt; =&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;one_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;one_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Special symbols and functions&lt;/h4&gt;
&lt;p&gt;(Also see this &lt;a href="https://rdrr.io/cran/data.table/man/special-symbols.html"&gt;reference&lt;/a&gt;)&lt;/p&gt;
&lt;h5&gt;.N&lt;/h5&gt;
&lt;p&gt;Returns the number of rows in the data.table, or when using a group, the number of rows in the group.  Can now be used in the I position, for example, to sample 20 rows from your table&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DT[sample(.N, 20)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;.I&lt;/h5&gt;
&lt;p&gt;This is a vector containing the index of the rows in the data.table from 1:.N. When using a group by, it is a vector containing the index in the original row in the datable for each row in the current group. Among other things, this can be used to add a primary key to a table with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DT[,pk:=.I]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can also be used to get the entire row corresponding to the maximum value of a particular column in each group:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DT[DT[,.I[which.max(time)], by=event_name]$V1]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that here &lt;code&gt;V1&lt;/code&gt; is the name of the unspecified column created by selecting in J without specifying a column name.&lt;/p&gt;
&lt;h5&gt;.SD&lt;/h5&gt;
&lt;p&gt;A data.table equal to the elements in the current group (Subset Data.Table). Can often be quite slow. &lt;/p&gt;
&lt;h5&gt;J()/CJ()/SJ()&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;J()&lt;/code&gt; is an alias for &lt;code&gt;list()&lt;/code&gt; or &lt;code&gt;.()&lt;/code&gt; inside in the I/subset section inside of a data.table. It does nothing else and is generally deprecated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CJ()&lt;/code&gt;/&lt;code&gt;SJ()&lt;/code&gt; These are convenience functions that can be used inside the I section of a data.table or outside to do a cross or sorted join, respectively. I have not yet used them. See &lt;a href="https://www.rdocumentation.org/packages/data.table/versions/1.11.4/topics/J"&gt;here&lt;/a&gt;.     &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;get function /  &lt;code&gt;():=&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;If you need to subset or select in J on a column name, but the column name you want to filter by is contained in a string variable, you can use the &lt;code&gt;get&lt;/code&gt; function.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var_col=&amp;quot;temperature&amp;quot;;DT[get(var_col)==50]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are updating or adding a column in J, and the column name is in a variable:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DT[i, (var_col) := val]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could do something similar by setting &lt;code&gt;with&lt;/code&gt; to FALSE:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DT[i, var_col := val, with=FALSE]
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;set function&lt;/h5&gt;
&lt;p&gt;If you want to update the values of a data.table column in a &lt;code&gt;for&lt;/code&gt; loop, it can be inefficient to use the &lt;code&gt;:=&lt;/code&gt; syntax repeatedly. This function makes it faster for you. I've only seen small speed ups, but could be useful. Generally for loops are not recommended by apparently for some tasks &lt;code&gt;for&lt;/code&gt; loops and set are recommended over using .SD. See http://brooksandrew.github.io/simpleblog/articles/advanced-data-table/&lt;/p&gt;
&lt;h5&gt;with keyword&lt;/h5&gt;
&lt;p&gt;This tells data.table whether you want the variable names used in the J position to resolve to column names or to be looked up in the surrounding scope as variables. Default is TRUE (use column names).&lt;/p&gt;
&lt;h4&gt;Miscellaneous Tips&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you are only grouping by a single column name, you can omit the &lt;code&gt;by=&lt;/code&gt;, for example, &lt;code&gt;DT[,.N,colname]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;keyby&lt;/code&gt; keyword does a group followed by a setkey on the resulting data.table.&lt;/li&gt;
&lt;li&gt;For comparing to values in prior or subsequent rows, see &lt;a href="https://www.rdocumentation.org/packages/data.table/versions/1.11.4/topics/shift"&gt;shift/lag keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Update mutliple columns by reference at once using &lt;code&gt;:=()&lt;/code&gt;,  for example, &lt;code&gt;DT[,':='(new1 = sum(colB), new2 = sum(colC))]&lt;/code&gt;. This is referred to as the functional form.&lt;/li&gt;
&lt;li&gt;Using variable names intead of columns, for example, &lt;code&gt;colvector = c("colname1", "colname2"); DT[,(colvector) := .(val1, val2)]&lt;/code&gt;.  You can also update multiple columns at once by referring to the column names as string literals in a vector on the left-hand side,&lt;code&gt;DT[, c("temperature","anothercol"):=.(3,4)]&lt;/code&gt;. See &lt;a href="https://jangorecki.gitlab.io/data.table/library/data.table/html/assign.html"&gt;here&lt;/a&gt; for more examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Gotchas&lt;/h4&gt;
&lt;h5&gt;Indexing data.table by a vector of integers vs matching on an integer key&lt;/h5&gt;
&lt;p&gt;Be aware that normally if you pass a vector of values into the I position, this will typically return the rows where the key is equal to one of those values. However, a vector of integers is reserved for returning the rows with those indexes. If you want to return rows based on the value of an integer key, you have to embed the vector in a list   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DT[.(c(1,3,4))]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this is just the syntax for selecting by multiple keys (indexing by a list of vectors) except we only supply one vector in the list.&lt;/p&gt;
&lt;h5&gt;Index by a boolean vector (like data.frame) and DT[BOOLEAN COLUMN==TRUE] vs DT[BOOLEAN_COLUMN]&lt;/h5&gt;
&lt;h6&gt;Indexing by a logical (boolean) vector&lt;/h6&gt;
&lt;p&gt;With a standard data.frame, the main way to select rows with specific values is to pass a vector of booleans into the first position.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DF[DF$A==5]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can basically do the same thing with data.table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s=(DT2$A==5|DT2$B==5); DT1[s]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is useful when you want to subset by some calculation you have done elsewhere. Keep in mind you can do &lt;code&gt;DT[DT$A==5]&lt;/code&gt;, but this is generally not done since &lt;code&gt;DT&lt;/code&gt; is redundant.&lt;/p&gt;
&lt;h6&gt;DT[BOOLEAN_COLUMN==TRUE]  vs  DT[BOOLEAN_COLUMN]&lt;/h6&gt;
&lt;p&gt;The first one works, the second will not. When I is a single variable name, data.table actually looks in the surround scope for the variable (this is what it does in the above example, &lt;code&gt;DT1[s]&lt;/code&gt; for the &lt;code&gt;s&lt;/code&gt; variable. This means you either have to directly compare to a boolean value, or use other &lt;a href="https://stackoverflow.com/questions/16191083/subset-data-table-by-logical-column"&gt;syntax tricks&lt;/a&gt;&lt;/p&gt;</content><category term="statistics"></category><category term="R"></category><category term="data science"></category><category term="data.table"></category></entry><entry><title>Developer introduction to RSA keys and SSL certificates</title><link href="http://jeffmax.io/developer-introduction-to-rsa-keys-and-ssl-certificates.html" rel="alternate"></link><published>2014-06-10T10:20:00+02:00</published><updated>2014-06-10T10:20:00+02:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2014-06-10:/developer-introduction-to-rsa-keys-and-ssl-certificates.html</id><summary type="html">&lt;p&gt;How to generate and use ssl keys and certificates (with some special attention to iOS)&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most of developers have had to generate a public/private key pair at one point or another. Often this is to create a certificate for a webserver, but it comes up for various reasons. Whenever I have to do this I am always extremely confused and amazed when it all works out, so in this post I am going to try to explain what is actually going on. Everything here will assume we are using RSA, which is complicated enough for one day.&lt;/p&gt;
&lt;p&gt;Caveat: I am not an expert (or even close) in cryptography. If anything is wrong in this article please use the comments section to correct me. I am very aware that wrong information in this topic is often much worse than no information at all.&lt;/p&gt;
&lt;h1&gt;The Basics&lt;/h1&gt;
&lt;p&gt;Using the openssl command you can do tons of stuff, so much stuff that sometimes it is very unclear what you are actually doing. Lets start with as basic as you can get.&lt;/p&gt;
&lt;h2&gt;Generate an RSA public/private key pair&lt;/h2&gt;
&lt;h3&gt;Private Key&lt;/h3&gt;
&lt;p&gt;As expained &lt;a href="http://stackoverflow.com/questions/5244129/openssl-use-rsa-private-key-to-generate-public-key"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out privatekey.pem 1024
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a file called privatekey.pem. This is actually kind of confusing already, because that file actually contains both your private &lt;strong&gt;and&lt;/strong&gt; public key. &lt;/p&gt;
&lt;h4&gt;What is this .pem file&lt;/h4&gt;
&lt;p&gt;This .pem file holds your private/public keys. It is in the PEM encoding, which is a human readable version of the DER encoding (see below). If you open one, typically you will see some kind of header like -----BEGIN RSA PRIVATE KEY----- followed by a series of characters and then a footer. One file can contain a series of objects like this. The mess of characters is a base64 encoded of ASN.1. As PEM is encoding as well as used a file extension, you will sometimes see a .key or .crt or .pub file that is in PEM format. A .pem extension itself doesn't really tell us much about what is in it. A PEM encoded file can contain a private/public key pair, just a public key or an entire certificate. The one we just generated just contains a private/public key pair&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are also DER files that can contain the same information except in binary format and without the headers and footers. I have run into .der files because iOS expects them. This &lt;a href="http://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file"&gt;link&lt;/a&gt; goes over some of the confusion points here. The openssl command can convert back and forth between this formats. DER encoding seems to be used more frequently (or perhaps all the time?) to hold certificates rather than just keys. Some .crt files are in DER format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Public Key&lt;/h3&gt;
&lt;p&gt;So now we have this .pem file with a private and public key, but if you want to do anything useful with this stuff you will need to be able to share only your public key. So the following extracts your public key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl rsa -in privatekey.pem -pubout &amp;gt; publickey.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a .pub file, but again, it's really just a PEM encoded file with only your public key. I believe the formats for these files are specified &lt;a href="http://tools.ietf.org/html/rfc3447#appendix-A.1.2"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Do something useful&lt;/h2&gt;
&lt;p&gt;So at this point, you have come to a cross road. What can we do with these things?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can generate a certificate for some task.&lt;/li&gt;
&lt;li&gt;We use them directly them for some larger crypto scheme like digital signatures.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Certificates&lt;/h3&gt;
&lt;p&gt;Certificates are useful if you are trying to setup a server for https or just need to work within the confines of a system that works best with certificates. For example, if you wanted to use your public key on iOS, the primitive functions exposed there expect a certificate even if you don't need any kind of chain of ownership. To generate a certificate you use openssl to create a Certificate Signing Request. In our case, we have already have a private/public key pair, so you would the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl req -out CSR.csr -key privatekey.key -new
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You would then either submit this to an organization that would sign it for you, or sign it yourself to create a self-signed certificate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -req -days XXX in CSR.csr -signkey privatekey.pem -our server.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ultimately if this was your goal, you could have done everything up to now (except extract the public key) in one step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl req -x509 -newkey rsa:2048 -keyout privatekey.pem -out cert.crt -days XXX
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See this &lt;a href="http://stackoverflow.com/questions/10175812/how-to-build-a-self-signed-certificate-with-openssl"&gt;link&lt;/a&gt; for a breakdown of this command and how to not require a password.&lt;/p&gt;
&lt;h4&gt;iOS&lt;/h4&gt;
&lt;p&gt;By the way, as mentioned briefly above, if you want to do anything involving a public/private key on iOS, you are going to want a self signed certificate in DER form.
This &lt;a href="http://stackoverflow.com/a/9764673/134930"&gt;link&lt;/a&gt; explains how to do this from scratch or from the .pem file we created in the first step. Keep in mind that you have a few options on iOS, but if you don't want a &lt;a href="http://jslim.net/blog/2013/06/24/rsa-decryption-on-ios/"&gt;solution&lt;/a&gt; that involves bundling openssl with your app, you need the self signed der file so you can use Apple's builtin functions. If you just want to verify a signed cert, I will go over that below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Technically to use a public key on iOS you basically need to get your key into a SecKeyRef. There are various ways to do this, see &lt;a href="http://stackoverflow.com/questions/15438257/ios-verifying-a-file-with-a-certificate-and-signature-public-key-is-wrong-ve"&gt;here&lt;/a&gt; and &lt;a href="http://blog.flirble.org/2011/01/05/rsa-public-key-openssl-ios/"&gt;here&lt;/a&gt; and this &lt;a href="https://github.com/xjunior/XRSA"&gt;pod&lt;/a&gt;. If you just need to verify a signature, look at the first link. This &lt;a href="http://stackoverflow.com/questions/21724337/signing-and-verifying-on-ios-using-rsa"&gt;link&lt;/a&gt; doesn't show how to load the certifcate, but shows both signing and verifying. You may need to tweak the functions and constants referring to SHA1 if you want to use SHA256.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can always read the &lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/Security/Conceptual/cryptoservices/CryptographyConcepts/CryptographyConcepts.html"&gt;Apple docs&lt;/a&gt; for more concrete information.&lt;/p&gt;
&lt;h5&gt;Verify a signature on iOS&lt;/h5&gt;
&lt;p&gt;Coming soon..&lt;/p&gt;
&lt;h3&gt;Use keys directly&lt;/h3&gt;
&lt;p&gt;Without a certificate (or with one) you can still create digital signatures for documents and verify them as well as encrypt and decrypt documents. You just use your private key to sign and other people use your public key to verify the signature (or someone else encrypts a document with your public key and you decrypt it with your private key). You can do this in Python using the M2Crypto, PyCrypt or rsa libraries. &lt;/p&gt;
&lt;p&gt;One thing to keep in mind- with RSA there is usually a "textbook" conceptual way to do things that involves the pure math, and then the safe, blessed implementation schemes. Something that really bit me once was that PyCrypt implements both a "textbook" version of RSA signatures and the two official signature schemes (RSASSA-PSS and
RSASSA-PKCS1-v1_5). Apparently the "textbook" one is not safe at all. See my comment &lt;a href="http://stackoverflow.com/a/24151428/134930"&gt;here&lt;/a&gt;. The difference between the "textbook" version and the two official schemes has to do with extra padding (or encoding) done between hashing and signing that prevents certain types of attacks. You can see technical details of the RSASSA-PCKS1-v1_5 &lt;a href="http://tools.ietf.org/html/rfc3447#section-9.2"&gt;here&lt;/a&gt;. One interesting thing to note there is that scheme hashes your document with a particular hash function (that you can specify) and then encodes which hash function was used as part of the padding before it actually signs. This is why depending on the api you might need to hash your document first and then pass a symbol indicating which hash function you used to the sign or verify method.
RSASSA-PSS is newer and seems to be generally recommended- but ultimately either is safer than naively hashing your document (with a SHA family function) and encrypting it with your RSA key (which is what I thought I could do after reading about digital signatures). &lt;/p&gt;</content><category term="rsa"></category><category term="certificates"></category><category term="cryptography"></category></entry><entry><title>Using Python for Statistics Coursework</title><link href="http://jeffmax.io/using-python-for-statistics-coursework.html" rel="alternate"></link><published>2014-06-08T10:20:00+02:00</published><updated>2014-06-08T10:20:00+02:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2014-06-08:/using-python-for-statistics-coursework.html</id><summary type="html">&lt;p&gt;Getting started with basic statistics in python&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am currently enrolled in an applied statistics program. For my course I really want to use the IPython Notebook. It allows me to do the calculations and show formulas all in one document. I have been trying figure out how to use Python instead of a statistics program. The functionality is all there, but is spread across different libraries, and there are many choices when it comes to graphing. In this post I will show to do some simple statistics (mostly related to linear regression) using Python.&lt;/p&gt;
&lt;h1&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;scipy&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;statsmodels&lt;/li&gt;
&lt;li&gt;matplotlib&lt;/li&gt;
&lt;li&gt;seaborn&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Getting data into Python&lt;/h1&gt;
&lt;p&gt;Data is typically in some column-based format (either in Excel, or a tab/comma delimeted file). CSV is the easiest to import, so use Excel to export whatever you have into CSV. Then Pandas has a method to quickly get data from a CSV file into Python (into a Pandas DataFrame object). Pandas provides a lot of functionality, but at its core is the DataFrame and Series object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The DataFrame is made up of Series objects (one for each column of your data). You can easily get to a Series by indexing into the DataFrame.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The columns are basically Numpy arrays- you can easily apply an operation to every value in the column.&lt;/p&gt;
&lt;h1&gt;Simple scatter plot&lt;/h1&gt;
&lt;p&gt;One of the frustrating things about getting up to speed with performing statistics in Python is that there is often more than one way to accomplish something. For example, Pandas allows you to easily create a scatter plot of two variables, but you can also do this directly through Matplotlib. In general, in my limited experience, if you can avoid dropping down to matplotlib, then do so. People have spent a lot of time worrying about the details so you don't need to. Unfortunately, it is likely you will need to learn it at some point to get exactly what you want.&lt;/p&gt;
&lt;h1&gt;With pandas&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Columns2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;scatter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Matplotlib&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_axes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are quite a few ways to accomplish the same thing in matplotlib. &lt;a href="http://matplotlib.org/1.3.1/users/pyplot_tutorial.html"&gt;This post&lt;/a&gt; is a decent place to get started, although it uses the Matlab style interface which I find gets confusing very fast. The alternative (and the one I used above) is the object oriented mode where you instantiate individual figure objects and operate on them instead of using a implicit global figure object. &lt;a href="http://nbviewer.ipython.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb"&gt;This link&lt;/a&gt; does a good job showing examples of both styles: .&lt;/p&gt;
&lt;p&gt;A tip- seaborn, which is a library for statistics visualization that uses matplotlib, will set some visual defaults for matplotlib as soon as you import it. Try importing and regenerating one of the graphs above to see the difference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Simple Linear Regression&lt;/h1&gt;
&lt;p&gt;Another example, you can do simple linear regression using the statsmodels library, but Pandas wraps that functionality up making it a little easier to perform when you are working with a DataFrame object. &lt;/p&gt;
&lt;h2&gt;Directly through Pandas DataFrame&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas.stats.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ols&lt;/span&gt;
&lt;span class="n"&gt;ols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column2]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Statsmodels&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.api&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sm&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OLS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use the statsmodel formula api to do the same thing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Column2 ~ Column1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Residuals vs Fits&lt;/h2&gt;
&lt;p&gt;Generating a graph of residuals versus the fitted y values has come up a few times. I searched for a library that does this out of the box, but could not find it. Seaborn comes close with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;residplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Column2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But unfortunately this creates a plot of residuals vs the x values. I think in many situations, this graph will tell you the same thing as residuals versus fitted values, but it is not what I was looking for. Here is how to create it with vanilla matplotlib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fitted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# This just needs to be whatever the linear regrsssion equation is&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_axes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axhline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This creates a horizon line (like abline in R)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fitted Value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Residuals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Residuals Versus Fits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Column2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ANOVA for linear regression&lt;/h2&gt;
&lt;p&gt;Not much to say here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.stats.anova&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;anova_lm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.formula.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ols&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Column2 ~ Column1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;anova_lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="statistics"></category><category term="python"></category><category term="seaborn"></category><category term="ggplot2"></category><category term="bokeh"></category><category term="pandas"></category><category term="statsmodels"></category></entry><entry><title>Distributing iOS App Updates to Beta Testers</title><link href="http://jeffmax.io/distributing-ios-app-updates-to-beta-testers.html" rel="alternate"></link><published>2013-11-16T11:38:00+01:00</published><updated>2013-11-16T11:38:00+01:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2013-11-16:/distributing-ios-app-updates-to-beta-testers.html</id><summary type="html">&lt;p&gt;Distributing iOS Apps&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you are writing an iOS app and have beta testers you need a method to update their devices with your latest release. Running around with a laptop and a cable will get old very fast. There are a few commercial solutions that I am sure work well, but this method is free and fairly painless.&lt;/p&gt;
&lt;p&gt;This post is a recapitulation of several posts already available on the web (see &lt;a href="http://readwrite.com/2010/12/15/apple-best-kept-secret-how-to-do-ad-hoc-installs"&gt;here&lt;/a&gt;, &lt;a href="http://www.paradeofrain.com/2010/11/taking-the-pain-out-of-ad-hoc-testing/"&gt;here&lt;/a&gt;, and especially &lt;a href="http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution"&gt;here&lt;/a&gt; ) but I wanted to put all the details in one place updated for the latest changes to XCode Menu names and using Github Releases. Much of this information can also be found in Apple's Documentation. This link may be useful: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/TestingYouriOSApp/TestingYouriOSApp.html"&gt;Apple Testing Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The basis tasks are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an adhoc profile on the Apple developer site including each beta testers device id. This creates a .mobileprovision file.&lt;/li&gt;
&lt;li&gt;Create an Archive for your application. This creates a plist file and[A] an .ipa file.&lt;/li&gt;
&lt;li&gt;Post all three files on the internet (or an intranet). You can use Github Releases.&lt;/li&gt;
&lt;li&gt;Create a simple HTML file (see this link for the original source of this idea http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution) that the users will navigate to on their device. The HTML file will contain a link that will allow them to install the latest version of your app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the details:&lt;/p&gt;
&lt;h2&gt;Step 1, Hang out on the Apple Developer site for a while&lt;/h2&gt;
&lt;p&gt;I won't pretend to have a solid fundamental understanding of Apple's certificate/provisioning/profile setup/mess, but for this task you definitely need to create an Adhoc Provisioning Profile. This falls into the Distribution category of profiles (as opposed to Development). I am going to list what worked for me circa November 2013.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the "Certificates, Identifiers &amp;amp; Profiles" section of the Apple Developer site.&lt;/li&gt;
&lt;li&gt;You need a Distribution Certificate for this task. Create one under "Certificates -&amp;gt; Production".&lt;/li&gt;
&lt;li&gt;Register all your beta tester's iOS devices in the "Devices" section. You will need each device's UDID. You can get this by plugging the device into your Mac and opening up the Organizer in XCode (intuitively hidden under "Windows -&amp;gt; Organizer").&lt;/li&gt;
&lt;li&gt;You need an App ID. I believe since your app is not actually going into the App Store yet you can get away with using a wild card App ID. Create this under the "Identifiers" section of the website.&lt;/li&gt;
&lt;li&gt;Create your Adhoc Provisioning Profile under "Provisioning Profiles -&amp;gt; Distribution". You will need to associate your Distribution Certificate, App ID, and each beta tester's device with the profile. Unfortunately this does mean you will need to generate a new one of these each time you want to add a new beta tester. I guess this is one of the reasons this method is free.&lt;/li&gt;
&lt;li&gt;You will now have a file with the .mobileprovision extension.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 3 Archive your App&lt;/h2&gt;
&lt;p&gt;In XCode, make sure you have "iOS device" selected in the toolbar at the top (the dropdown where you choose which device to run your App on, or which simulator).  Click "Product -&amp;gt; Archive". Once that succeeds, follow the instructions in step 2 thru 6 &lt;a href="http://readwrite.com/2010/12/15/apple-best-kept-secret-how-to-do-ad-hoc-installs#awesm=~onnHAUeZCe9nws"&gt;here&lt;/a&gt;. You will need to enter the URL where you intend to place the bundle for your users to download. This is because to install your application on their device, users will actually download a .plist file (created in this step), that links to the actual location of your app. As I go into detail below, I put these files on Github Releases, so the location would be something like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo-name&amp;gt;/releases/download/&amp;lt;release-tag-name&amp;gt;/YourApp.ipa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will get a .plist file and a .ipa file.&lt;/p&gt;
&lt;h2&gt;Step 4 &amp;amp; 5 Put these files somewhere your users can access them and create an HTML page that links to your plist&lt;/h2&gt;
&lt;p&gt;You can put these files anywhere you want, as long as people will be able to download them. Thanks to a suggestion from &lt;a href="https://twitter.com/mitalia"&gt;mitalia&lt;/a&gt;, I put these on our internal Github using the Releases functionality. You can also use public Github. You just create a release, and attach all three files as binary attachments and Github will store them for you.&lt;/p&gt;
&lt;p&gt;You can just post the .mobileprovision file directly on Github releases. A word of caution, I have no idea what the ramifications are of posting a provisioning profile on the public internet are, it might be advisable to make the Github repository private, or post this file elsewhere. The link that Github Releases automatically generates for files you bundle with your release will work. Just tell your users to click the link on their iOS device, and it will prompt them to install the provisioning profile on the device. Unfortunately, for installing the app itself you need a little more control over the HTML anchor element, so you need to create an HTML file that contains the properly formatted link. &lt;a href="http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution"&gt;This post&lt;/a&gt; provides a template HTML index file you can use (and a nice PHP script that makes this simpler if you are not using Github Releases), but effectively you just need to create an HTML page with a link constructed as follows that your users will click on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;itms-services://?action=download-manifest&amp;amp;url=LINK_TO_YOUR_PLIST_FILE&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click to install&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, you can post this HTML file anywhere. I actually just upload it to Github Releases the same way I upload the other files. The users will see a link to the HTML file in the attachments portion of the Release. In a normal browser clicking the link would result in downloading the file to the machine because Github Release sets the link as "nofollow", but in the file system averse iOS, Safari will render the HTML as if the user just clicked on a normal link. They then click the link to your PLIST and will be prompted to install your app.&lt;/p&gt;
&lt;p&gt;You can then create a new release or update this one as you need users to update the app. They will only need to install the provisioning profile once.&lt;/p&gt;</content></entry><entry><title>Python modules: How does Python know where to find them?</title><link href="http://jeffmax.io/python-modules-how-does-python-know-where-to-find-them.html" rel="alternate"></link><published>2012-01-31T03:00:11+01:00</published><updated>2012-01-31T03:00:11+01:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2012-01-31:/python-modules-how-does-python-know-where-to-find-them.html</id><summary type="html">&lt;p&gt;How does Python decide where to look for a module&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love Python, but I have always been a little frustrated by how it handles installing and locating modules. The situation is further complicated by Python Eggs, which I find to be an off-putting name for a endlessly frustrating feature. In particular, I have never really figured out where native support for eggs (just .zip files really) in Python ends and special functionality provided by setuptools begins. In this post I am going to try to figure most of this out in what I hope to be a sane order.&lt;/p&gt;
&lt;p&gt;As a note, I know a lot of this is made much simpler by just using virtualenv, but these issues still come up.&lt;/p&gt;
&lt;p&gt;First, a really great introduction to Python modules/packages in general:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mxm-mad-science.blogspot.com/2008/02/python-eggs-simple-introduction.html"&gt;http://mxm-mad-science.blogspot.com/2008/02/python-eggs-simple-introduction.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;He deftly handles a point of confusion I always seem to run into&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;A module and a package are not the same thing.&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you are importing a package which would be represented by a directory (on the Python Path) containing a &lt;strong&gt;init&lt;/strong&gt;.py file, you cannot assume that&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will work for every y that this works for&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;x&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because when you import x, you are importing the package x, defined my its &lt;strong&gt;init&lt;/strong&gt;.py file. Unless y is explicitly imported in that file like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will not just work.&lt;/p&gt;
&lt;p&gt;At least I am not the only &lt;a href="http://stackoverflow.com/questions/6386061/why-import-xx-y-behaves-different-from-from-x-import-y-and-1st-one-fails-w"&gt;one&lt;/a&gt; who was confused by this.&lt;/p&gt;
&lt;h2&gt;OK, that is out of the way. Which site-packages will my Python use?&lt;/h2&gt;
&lt;p&gt;It turns out this is a defined at install time, and the defaults vary by system. In particular, look for the details of prefix and exec_prefix at this link &lt;a href="http://docs.python.org/install/index.html#how-installation-works"&gt;http://docs.python.org/install/index.html#how-installation-works&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am still trying to figure out the details, but it also seems that the Python site module is loaded on interpreter startup and can add some system specific locations to the python path. Check this link out for details &lt;a href="http://docs.python.org/library/site.html"&gt;http://docs.python.org/library/site.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's also worth pointing out that Python modules that contain c-extensions are by definition dependent on your processor architecture. On some systems/installers they will therefore be placed in an architecture specific location (probably /usr/lib64 instes of /usr/lib).&lt;/p&gt;
&lt;p&gt;Holy Moly this is confusing! I rant into a situation today where I installed module with a c-extension, and because a c-extension made the Python module architecture dependent it was installed (by yum on Centos) in the /usr/lib64/python2.7/site-packages directory rather than /usr/lib. However, Python, by default wasn't looking there.  Thanks!&lt;/p&gt;
&lt;h2&gt;OK, I found my site-packages directory, where else might it look for modules?&lt;/h2&gt;
&lt;h3&gt;.pth files&lt;/h3&gt;
&lt;p&gt;If you have a .pth file in your site-packages directory, the packages and modules (and eggs, yuck!) listed in there will be added to the path. Setup tools puts an easy-install.pth file in there usually, but you can add your own.&lt;/p&gt;
&lt;h3&gt;PYTHONPATH environment variable&lt;/h3&gt;
&lt;p&gt;You can also add locations to the path by adding them to the PYTHONPATH environment variable (just like CLASSPATH in Java).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.stereoplex.com/blog/understanding-imports-and-pythonpath"&gt;http://www.stereoplex.com/blog/understanding-imports-and-pythonpath&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;eggs&lt;/h3&gt;
&lt;p&gt;This is where I am not even all that sure. I think that natively (without setuptools) Python can support looking in Eggs (which are just zip files) for code. So if you put in egg in site-packages or another directory on the path, or list the egg itself on the path it will work.&lt;/p&gt;
&lt;p&gt;From the source,&lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs#Using-eggs"&gt; http://peak.telecommunity.com/DevCenter/PythonEggs#Using-eggs&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a pure-Python .egg file that doesn't use any in-package data files, and you don't mind manually placing it on sys.path or PYTHONPATH, you can use the egg without installing setuptools. For eggs containing C extensions, however, or those that need access to non-Python data files contained in the egg, you'll need the pkg_resources module from setuptools installed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I guess that answers that. I am sure you have run into situations where pkg_resources was missing. It's likely that was caused my a project needing some of the more specialty features of an egg. I've heard, for example , that you some applications will be installable via their setup.py file without setuptools installed; they just won't run without it.&lt;/p&gt;
&lt;h5&gt;Wherein I ramble on about how "import" might work with eggs without taking the time actually find out the answer&lt;/h5&gt;
&lt;p&gt;The same site points that you can import an egg (and I assume they mean an egg with with data files or c extensions) with this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkg_resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FooBar&amp;gt;=1.2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However this&lt;a href="http://www.ibm.com/developerworks/linux/library/l-cppeak3/index.html"&gt; site &lt;/a&gt;says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may use an egg simply by pointing PYTHONPATH or sys.path at it and importing as you normally would, thanks to the import hook changes in recent versions of Python (you need 2.3.5+ or 2.4). If you wish to take this approach, you do not need to bother with setuptool sor ez_setup.py at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I am a bit confused as to exactly what happened in 2.3.5 that enables full support for eggs within Python natively. If they are just hooks, do you need to install a library to take advantage of those hooks? Confusing. I will try to figure this out.&lt;/p&gt;
&lt;h5&gt;.egg-info directories&lt;/h5&gt;
&lt;p&gt;Ha, I have no idea what this is. Someone &lt;a href="http://stackoverflow.com/questions/256417/python-packages-and-egg-info-directories"&gt;here&lt;/a&gt; does though. It's still overly complicated though.&lt;/p&gt;
&lt;h3&gt;Oh, wait! Can we add just one more edge-case here for good measure? (the Python egg cache)&lt;/h3&gt;
&lt;p&gt;Some eggs that are zipped (but not all mind you), for reasons that I have never fully understood (there is an &lt;a href="http://stackoverflow.com/questions/2192323/what-is-the-python-egg-cache-python-egg-cache/2193746#2193746"&gt;explanation in the note of this stackoverflow answer&lt;/a&gt;), must actually be unzipped and placed somewhere at runtime. By default this is done in /$HOME/.python-eggs. You can override this with the PYTHON_EGG_CACHE environment variable. This is the source of endless problems during deployment when you think everything is working, but then you deploy, and your webserver doesn't have permission to access wherever the egg cache is located.&lt;/p&gt;
&lt;h2&gt;distutils, setuptools, ez_setup.py, easy_install.py,  distribute, and distutils2&lt;/h2&gt;
&lt;p&gt;This is slightly off-topic, but relevant in that it relates to how you might install python modules.  The original python module for packaging was called distutils. It is very limited, and PEAK came out with setuptools to enhance its functionality. This introduced the whole egg thing.  It included a boostrap utility called ez_setup.py that will install setuptools and and utility called easy_install.py. easy_install.py could then be used from the command line to install python modules from PyPi (the cheeseshop).&lt;/p&gt;
&lt;p&gt;Setuptools is nice, but the &lt;a href="http://peak.telecommunity.com/DevCenter/setuptools"&gt;documentation on the PEAK &lt;/a&gt;website is infamously terrible, and the project has stagnated. &lt;a href="http://packages.python.org/distribute/"&gt;Distribute&lt;/a&gt; is a fork of setuptools that add some functionality. To use it Distribute within a project, there is a file called distribute_setup.py that you can package with you code and &lt;a href="http://packages.python.org/distribute/using.html"&gt;call from your setup.py &lt;/a&gt;that will install it.&lt;/p&gt;
&lt;p&gt;Then comes distutils2. I did some reading on the web, and the discussion seems to suggest that distutils2 is a re-write of distutils, but &lt;a href="http://stackoverflow.com/a/6522905/134930"&gt;done by team that was working on Distribute&lt;/a&gt;. Allegedly resources moved from working on Distribute to distutils2, and distutils2 is &lt;a href="http://guide.python-distribute.org/introduction.html#current-state-of-packaging"&gt;the future&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Interestingly enough, as of the time I wrote this, there seem to be two different repos for distutils2- on &lt;a href="https://bitbucket.org/tarek/distutils2/overview"&gt;bitbucket&lt;/a&gt; and &lt;a href="http://hg.python.org/distutils2"&gt;python.org&lt;/a&gt;. The latest commit on either of those repos was 2 &lt;a href="http://hg.python.org/distutils2/rev/42342803970e"&gt;months ago&lt;/a&gt;. Distribute, on the other hand, the supposedly less active project, has one repo on &lt;a href="https://bitbucket.org/tarek/distribute/overview"&gt;bitbucket&lt;/a&gt; and the &lt;a href="https://bitbucket.org/tarek/distribute/changeset/67bbcd0bfdef"&gt;last commit was 11 days ago&lt;/a&gt;. So, in short, I have no idea what is going on.&lt;/p&gt;</content><category term="python"></category><category term="import"></category></entry><entry><title>Yet Another Vim Post</title><link href="http://jeffmax.io/yet-another-vim-post.html" rel="alternate"></link><published>2012-01-19T01:55:52+01:00</published><updated>2012-01-19T01:55:52+01:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2012-01-19:/yet-another-vim-post.html</id><summary type="html">&lt;p&gt;Info on Vim&lt;/p&gt;</summary><content type="html">&lt;h1&gt;A few of my favorite things (in an editor)&lt;/h1&gt;
&lt;p&gt;I have a couple things I really look for in a text editor.&lt;/p&gt;
&lt;p&gt;1) I need vertical selection, and I need it to not be really awkward to do.&lt;/p&gt;
&lt;p&gt;2) I need to be able to open up a folder as a project. I can't stand when an xml or .property file is required to define a project. The files are in a folder. That's it&lt;/p&gt;
&lt;h1&gt;Making Vim nicer/easier&lt;/h1&gt;
&lt;p&gt;Textmate does both of these, but obviously only works on Mac, and Vim can be made to do both of these things. I have gone back and forth between using Vim and Textmate over the past few years, but I have been using Vim for a while now.  A couple of things have contributed to that:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/b4winckler/macvim"&gt;MacVim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/carlhuda/janus"&gt;Janus, a well-maintained Vim configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some people recommend not using anything like Janus when first getting started with Vim. That may be good advice to some, but I think in general, anything that cuts down on everyone having to go through the same painful (and not strictly necessary) configuration learning curve is probably useful. If you use Janus and really like it, you will probably go back and fill in some of the basics you missed. One of the things I really like with Janus is they have it configured so that out of the box if you type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;at the command prompt, it will launch vim with Nerdtree (a file folder plugin) showing the current folder. I've never really looked to see if this is complex or easy to do, but with Janus, I don't have to!&lt;/p&gt;
&lt;p&gt;A slight note: while the above is still useful at times, I have recently been using the &lt;a href="https://github.com/kien/ctrlp.vim"&gt;ctrlp&lt;/a&gt; (or &lt;a href="https://github.com/wincent/Command-T"&gt;Command-T&lt;/a&gt; works too) plugin to quickly search and open the file I want instead of navigating around in the Nerdtree file navigator.&lt;/p&gt;
&lt;p&gt;Even if you use Janus, you still need to learn how to use Vim as an editor (as opposed to setting up its configuration files) and you will no doubt want to make configuration tweaks.  The rest of this post is dedicated to some of my favorite links that explain both Vim configuration and  how to actually use it as an editor.&lt;/p&gt;
&lt;h1&gt;Vim Basics&lt;/h1&gt;
&lt;p&gt;This is a good introduction to customizing Vim:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nvie.com/posts/how-i-boosted-my-vim/"&gt;http://nvie.com/posts/how-i-boosted-my-vim/&lt;/a&gt;  (most of my non-Janus vimrc comes from this one)&lt;/p&gt;
&lt;p&gt;This is also a introduction to Vim in general:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.memodrive.com/_media/docs/tools/vim_tips1.pdf"&gt;http://wiki.memodrive.com/_media/docs/tools/&lt;strong&gt;vim&lt;/strong&gt;_tips1.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Key Concepts&lt;/h1&gt;
&lt;p&gt;You can use Vim for a while without understanding the concepts introduced in this next post, but this is the only one I have ever seen that does a good job of explaining Vim text objects (as compared to motions). He really breaks down the usage of "&amp;lt;#&amp;gt;&lt;Command&gt;&lt;Motion or Text Object&gt;" in Vim normal mode.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you understand text objects vs motions, this tutorial is a good review.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mislav.uniqpath.com/2011/12/vim-revisited/"&gt;http://mislav.uniqpath.com/2011/12/vim-revisited/ &lt;/a&gt; (although he hates Janus)&lt;/p&gt;
&lt;h1&gt;Other enhancements&lt;/h1&gt;
&lt;p&gt;This is a really great plugin, even if you are not using Janus (which just added it).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;EasyMotion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basically it makes it easy to jump to the exact desired spot on the screen without counting lines and words (who can count anymore anyway?).&lt;/p&gt;
&lt;p&gt;There are a bunch of settings that I prefer (you can see them&lt;a href="https://github.com/jeffmax/Vim/blob/master/.vimrc"&gt; here,&lt;/a&gt; but I am sure there are better .vimrc files out &lt;a href="https://bitbucket.org/sjl/dotfiles/src/b5e60ade957d/vim/.vimrc"&gt;there&lt;/a&gt;), but there is one that I could not do without:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set virtualedit+=block
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This enables you to navigate beyond the end of the line and onto blank lines when in visual block mode. Without this I find it very difficult to use Vim at all, especially when trying to do some of the things I could do in Textmate with vertical selections.&lt;/p&gt;
&lt;h1&gt;Some other great blog posts about Vim&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stevelosh.com/blog/2010/09/coming-home-to-vim/"&gt;http://stevelosh.com/blog/2010/09/coming-home-to-vim/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1497958/how-to-use-vim-registers/1498026#1498026"&gt;http://stackoverflow.com/questions/1497958/how-to-use-vim-registers/1498026#1498026&lt;/a&gt;  The second most popular answer is really useful and I have never seen it discussed elsewhere.&lt;/p&gt;</content><category term="vim"></category></entry><entry><title>tty, session leader, terminal, controlling terminal, stdout and stdin, foreground and background</title><link href="http://jeffmax.io/tty-session-leader-terminal-controlling-terminal-stdout-and-stdin-foreground-and-background.html" rel="alternate"></link><published>2011-09-04T23:11:09+02:00</published><updated>2011-09-04T23:11:09+02:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2011-09-04:/tty-session-leader-terminal-controlling-terminal-stdout-and-stdin-foreground-and-background.html</id><summary type="html">&lt;p&gt;Details about tty&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have always found the details of the relationships between terminals, standard out/in, and pseudo terminals on Unix variants a bit confusing. This post is my attempt to get some things straight. It may be desultory, over simplified, and at times, blatantly incorrect. Please let me know if I have butchered anything.  I  will post links as I go along and at the end that may be more enlightening. Please note, I am on OS X, a bsd variant.&lt;/p&gt;
&lt;h2&gt;Terminal Emulator and pseudo terminals&lt;/h2&gt;
&lt;p&gt;First, assuming you are running something like Mac OS X Terminal.app, you are running a terminal emulator. This much is pretty straight-forward. This is an application that emulates in software what used to be a hardware VT-something terminal. You are also running a shell application, possibly bash.  Since, in a current day system, both the shell and the Terminal.app are processes running on the machine, rather than the shell outputing to a hardware device, there needs to be some way for the shell to communicate with the Terminal emulator. This is where the Kernel steps in to help out in the form of pseudo-terminals.&lt;/p&gt;
&lt;p&gt;If, at your terminal, you type:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sytstem will respond with something like&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/dev/ttys001&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the slave end of your current pseudo-terminal. The slave end is attached to your shell. You also have an associated master side of your pseudo-terminal located at something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/dev/ptys1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is attached to the terminal emulator (Terminal.app)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From the BSD man pages:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"The slave device provides to a process an interface identical to that described in tty(4). However,
whereas all other devices which provide the interface described in tty(4) have a hardware
device of some sort behind them, the slave device has, instead, another process manipulating it
through the master half of the pseudo terminal. That is, anything written on the master device is given to
the slave device as input and anything written on the slave device is presented as input on the master device."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;From Wikipedia:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Important applications of pseudo terminals include xterm and similar terminal emulators in the X Window System and other window systems like Terminal application in Mac OS X, in which the terminal emulator process is associated with the master device and the shell is associated with the slave. Any terminal operations performed by the shell in a terminal emulator session are received and handled by the terminal emulator process itself (such as terminal resizing or terminal resets). The terminal emulator process receives input from the keyboard and mouse using windowing events, and is thus able to transmit these characters to the shell, giving the shell the appearance of the terminal emulator being an underlying hardware object."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I believe that /dev/tty is a shortcut to the current slave device (the one returned by the tty command). Officially, it is " a synonym for the controlling terminal of a process, &lt;strong&gt;if any&lt;/strong&gt;" (see &lt;a href="http://stackoverflow.com/questions/4667154/what-is-the-difference-between-writing-to-stdout-and-a-filehandle-opened-to-dev"&gt;http://stackoverflow.com/questions/4667154/what-is-the-difference-between-writing-to-stdout-and-a-filehandle-opened-to-dev&lt;/a&gt;).  In fact, if you do the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo "HI" &amp;gt; /dev/tty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;you should see "HI" printed to your terminal. This makes sense because the slave device is connected to the master device, which Terminal.app is attached to.  Your bash shell will associate its stdout (file descriptor 1) with the device at /dev/tty. "Any process it spawns without redirecting stdout will also have this association" (from  &lt;a href="http://stackoverflow.com/questions/4667154/what-is-the-difference-between-writing-to-stdout-and-a-filehandle-opened-to-dev"&gt;http://stackoverflow.com/questions/4667154/what-is-the-difference-between-writing-to-stdout-and-a-filehandle-opened-to-dev&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Additionally, on OS X, /dev/fd/ will contain your file descriptors for the current process, and there are also shortcuts at /dev/stdin, /dev/stdout, and /dev/stderr.&lt;/p&gt;
&lt;h2&gt;Session&lt;/h2&gt;
&lt;p&gt;The session in the container for all the processes that will be associated with a controlling terminal (tty). Each session has one controlling terminal, and vice versa.&lt;/p&gt;
&lt;h2&gt;Session Leader&lt;/h2&gt;
&lt;p&gt;Your shell (or the login process that created the shell) in the above situation would be considered the session leader, because it was the initial process of the session and is interacting with the controlling terminal.&lt;/p&gt;
&lt;p&gt;From &lt;a href="http://www.gnu.org/s/hello/manual/libc/Concepts-of-Job-Control.html"&gt;http://www.gnu.org/s/hello/manual/libc/Concepts-of-Job-Control.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;"Usually, new sessions are created by the system login program, and the session leader is the process running the user's login shell."&lt;/p&gt;
&lt;h2&gt;Process Groups/Jobs&lt;/h2&gt;
&lt;p&gt;When you execute something from the shell, this is called a command. The command may actually launch more than one process, for example, if you use the pipe (|) to string together a few unix commands. These processes will all belong to the same process group (also called a Job). Process groups are actually what receive signals, not individual processes.  All process groups launched from the session leader are in the same session. When the process gets created, it will actually be in the same process group as its parent as well, but  as part of standard operating procedure, the shell will immediately set the process to its own unique process group.  Processes all inherit the same controlling terminal, stdin and stdout of the session leader (and are called child processes). These process groups are job controlled by the shell (the shell can start, stop, and suspend, background and foreground them).&lt;/p&gt;
&lt;p&gt;See&lt;a href="http://www.gnu.org/s/hello/manual/libc/Concepts-of-Job-Control.html"&gt; http://www.gnu.org/s/hello/manual/libc/Concepts-of-Job-Control.html&lt;/a&gt; for a more indepth explanation of the Session-&amp;gt;Process Group-&amp;gt;Process relationship.&lt;/p&gt;
&lt;p&gt;The shell (session leader) is in charge of job control. It must decide which of the process groups it has started will have access to the controlling terminal. This is accomplished by setting the "foreground process-group of the controlling terminal". The reason this distinction must be made is that it needs to be clear which process group should be receiving input from the keyboard and  to a lesser extent, which should be allowed to print to the terminal ( I say to a lesser extent because I think on most systems, by default, more than one process group can try to write to the controlling terminal, and it will interleave the output).&lt;/p&gt;
&lt;p&gt;As an example, if you run&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps -la&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;you will see all the processes running (that are associated with a controlling terminal, I believe GUI processes on systems like OS X don't really play by these rules, so you won't see them). If you look in the STAT column you will see some letters. Capital S means the process is sleeping, R means it is running. The second character signifies additional state. s means the process is the session leader, and a + means the process is currently in the foreground process group of its controlling terminal.  If you are only running one Terminal, you should see that there is a login process that is the session leader, that the bash process is sleeping, and that the ps process is running and in the foreground process group(R+).  You can see in the TTY column what the controlling terminal is for each process, and in this case they will all be the same. This is the same device that would be returned by the "tty" command.&lt;/p&gt;
&lt;p&gt;Just for fun, if you open another terminal, and type ps -la, and look at the bash process on the controlling terminal of your previous terminal, you will see that is now has a + sign associated with it, since the ps process has ended, and the shell itself is now in the foreground process of the controlling terminal again.&lt;/p&gt;
&lt;p&gt;So, as you are probably aware, running a process with an &amp;amp; after it from the shell will put that process in the background, and return control of the terminal to the shell.  The process can probably still write to the terminal, which might cause output to be annoyingly interleaved with what you are trying to do on the shell, but if it tries to read from its stdin, which is the controlling terminal, it  will receive a SIGTTIN signal and will be stopped.&lt;/p&gt;
&lt;p&gt;See these links:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gnu.org/s/hello/manual/libc/Concepts-of-Job-Control.html"&gt;http://www.gnu.org/s/hello/manual/libc/Concepts-of-Job-Control.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gnu.org/s/hello/manual/libc/Access-to-the-Terminal.html#Access-to-the-Terminal"&gt;http://www.gnu.org/s/hello/manual/libc/Access-to-the-Terminal.html#Access-to-the-Terminal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pubs.opengroup.org/onlinepubs/009604499/basedefs/xbd_chap11.html"&gt;http://pubs.opengroup.org/onlinepubs/009604499/basedefs/xbd_chap11.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Creating daemons&lt;/h2&gt;
&lt;p&gt;With this information in hand, we can understand what it takes to create a process that will not die once we log off our shell. First, we need to redirect its standard in, standard out, and standard error to a place that will exist once we log off, because the controlling terminal will be gone. Often this is either a log file or /dev/null.&lt;/p&gt;
&lt;p&gt;When we log out, the controlling terminal will be destroyed, and the shell will receive the SIGHUP signal, which it then sends to all its child processes (type "jobs" at the command line to see who would receive SIGHUP if your terminal closed, these are called processes that are "under job control" of the session leader). To prevent our daemon process from receiving this signal, you can either initially execute it wrapped in the "nohup" command, or if you decide you need to do it after the fact, you can use the "disown" command.&lt;/p&gt;
&lt;h2&gt;Additional Links&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Zombie_process"&gt;http://en.wikipedia.org/wiki/Zombie_process&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.nelhage.com/tag/termios/"&gt;http://blog.nelhage.com/tag/termios/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rachid.koucha.free.fr/tech_corner/pty_pdip.html"&gt;http://rachid.koucha.free.fr/tech_corner/pty_pdip.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.linusakesson.net/programming/tty/index.php"&gt;http://www.linusakesson.net/programming/tty/index.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/nelhage/reptyr"&gt;https://github.com/nelhage/reptyr&lt;/a&gt;&lt;/p&gt;</content><category term="bash"></category><category term="tty"></category></entry><entry><title>Progressively Improving a SQL Query</title><link href="http://jeffmax.io/progressively-improving-a-sql-query.html" rel="alternate"></link><published>2011-05-20T00:00:00+02:00</published><updated>2011-05-20T00:00:00+02:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2011-05-20:/progressively-improving-a-sql-query.html</id><summary type="html">&lt;p&gt;Distributing iOS Apps&lt;/p&gt;</summary><content type="html">&lt;p&gt;A note on this post: I will be discussing the details to the solution of a problem that was solved by a co-worker of mine. See his blog, &lt;a href="http://devel.io//"&gt;The Devel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SQL has always been a bit of a mystery to me. To date, my most complicated queries have been fairly simple table joins. Recently I stumbled upon a problem that I would have traditionally solved by doing two or three separate dynamically generated queries executed from a programming language like Python. My mercifully patient co-workers explained the problem could be solved with one query that uses a few more advanced SQL concepts, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a subquery&lt;/li&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;HAVING&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I can see versions of this problem (described below) coming up in other domains. I am going to walk through the solution in this post, from the most naive implementation up through a single query that solves the entire problem. Hopefully it will be a relatable guide to using some of SQL's interesting features. I am also posting a sample &lt;a href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt; database that you can download and play with while working through the post. If you are not familiar with SQLite, it is a simple, server-less SQL database. It is very widely used and often embedded within other products (it might be running in your web browser). It is perfect for learning SQL because there is virtually no setup and it is almost impossible to break anything.&lt;/p&gt;
&lt;p&gt;To get started, download the &lt;a href="http://www.sqlite.org/download.html"&gt;SQLite executable &lt;/a&gt; and the &lt;a href="https://github.com/jeffmax/blog/blob/master/movies.db?raw=true"&gt;movies.db&lt;/a&gt; file.
Once SQLite is installed, if you open a console and navigate to the location of your downloaded movies.db file and type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sqlite3 movies.db
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you will be at a SQL prompt ready to go.&lt;/p&gt;
&lt;h1&gt;Slightly Contrived Problem&lt;/h1&gt;
&lt;p&gt;You are in charge of assigning movies to movie reviewers. You have a list of movies, and a list of reviews tagged with the reviewer. When a reviewer asks for an assignment, you must assign him or her a movie that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They have not yet reviewed.&lt;/li&gt;
&lt;li&gt;Has only been reviewed by at most N other reviewers.&lt;/li&gt;
&lt;li&gt;Of the movies that fit criteria 1 and 2, each movie is just as likely to be assigned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, if we take N to be 1, you just want every movie to be reviewed by 1 reviewer, and you want every movie to have an equal chance of being reviewed.&lt;/p&gt;
&lt;p&gt;For the purpose of this post, your data is stored in a database with the following two tables:&lt;/p&gt;
&lt;h3&gt;Movies Table&lt;/h3&gt;
&lt;table class="table table-bordered"&gt;
&lt;tr&gt;&lt;td&gt;id&lt;/td&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;length&lt;/td&gt;&lt;td&gt;year&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;The Shawshank Redemption&lt;/td&gt;&lt;td&gt;2.5&lt;/td&gt;&lt;td&gt;1994&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;The Dark Knight&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;2008&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Fight Club&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1999&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Goodfellas&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1990&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Casablanca&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;1942&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;Reviews Table&lt;/h3&gt;
&lt;table class="table table-bordered"&gt;
&lt;tr&gt;&lt;td&gt;id&lt;/td&gt;&lt;td&gt;reviewer&lt;/td&gt;&lt;td&gt;rating&lt;/td&gt;&lt;td&gt;movie&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Grumpy&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Happy&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Sleepy&lt;/td&gt;&lt;td&gt;?&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Martin&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;How I would solve this with brute-force, mediocre SQL&lt;/h2&gt;
&lt;p&gt;Sleepy wants his next assignment.
The simplest solution to the problem is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a select on the reviews table for all reviews by Sleepy.&lt;/li&gt;
&lt;li&gt;Do a select on the movies table, selecting all movies whose ids are not in the list created in step 1.&lt;/li&gt;
&lt;li&gt;Iterate through the list of movies from step 2, querying the review table for reviews for that movie. Then choose (at random) a movie whose number of reviews is &amp;lt; N.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets work through this at the SQLite prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Sleepy&lt;/span&gt;&lt;span class="o"&gt;|?|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then generate a SQL query on the movies table to grab all the movies Sleepy has not yet reviewed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Shawshank&lt;/span&gt; &lt;span class="n"&gt;Redemption&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1994&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Casablanca&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1942&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, iterate through each movie returned in the previous query, constructing a query to count the number of reviews for that movie.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Shawshank had no reviews, The Dark Knight had 1 review, Goodfellas had 2 reviews, and Casablanca had no reviews. If N was equal to 1, randomly choose between Shawshank and Casablanca, assigning one of them to Sleepy. All done!&lt;/p&gt;
&lt;h2&gt;How can this be done better?&lt;/h2&gt;
&lt;p&gt;The first step in improving this process is to introduce a subquery.
We can essentially do our first two queries above in one call to the database like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Shawshank&lt;/span&gt; &lt;span class="n"&gt;Redemption&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Goodfellas&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Casablanca&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now know the names of the movies that Sleepy has not reviewed. We could now just do step 3 above, iterating through each movie to find out how many reviews we have for each one.&lt;/p&gt;
&lt;h2&gt;Brief Aside&lt;/h2&gt;
&lt;p&gt;One thing I found confusing when going from trivial SQL queries to more complex problems was that by doing a SELECT from more than one table using a WHERE clause, you are doing an implicit inner join. There are quite a few different types of joins that you can actually perform. I have found the following two links helpful:
&lt;a href="http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html"&gt;Jeff Atwood explains SQL joins using Venn Diagrams&lt;/a&gt;
and
&lt;a href="http://en.wikipedia.org/wiki/Join_(SQL)"&gt;Wikipedia takes a crack at SQL join types&lt;/a&gt;.
So for example, if we wanted to do an inner join on our two tables, one way would be with the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Grumpy&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Happy&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Fight&lt;/span&gt; &lt;span class="n"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1999&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Sleepy&lt;/span&gt;&lt;span class="o"&gt;|?|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Martin&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we get a row for each movie review. If there is no review, the movie is not showing up at all. This is because it did an implicit inner join. Other types of joins would produce different results.
The same query using the more explicit syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Grumpy&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Happy&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Fight&lt;/span&gt; &lt;span class="n"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1999&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Sleepy&lt;/span&gt;&lt;span class="o"&gt;|?|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1990&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Martin&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For clarity's sake, I will use the more explicit syntax from here on out.&lt;/p&gt;
&lt;h2&gt;But we can do better&lt;/h2&gt;
&lt;p&gt;Let's join these two tables.&lt;/p&gt;
&lt;p&gt;So if we join these two tables on the movie id, and select only the fields we actually care about, we could write the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Grumpy&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Happy&lt;/span&gt;
&lt;span class="n"&gt;Fight&lt;/span&gt; &lt;span class="n"&gt;Club&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Sleepy&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Martin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above query might also be written like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just look this over for a second and it should become clear that the M and R following the table names are aliases. Everywhere else in the query that alias is used to refer to its associated table name. You will probably see this used in the SQL wild.&lt;/p&gt;
&lt;p&gt;So we have joined our two tables and grabbed only the information we really cared about. If we add back our subquery, we get this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Grumpy&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Happy&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Martin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now have one row for each movie not reviewed by Sleepy. We could almost solve this problem now without hitting the database again except for the fact that we don't have any information about movies that have no reviews. From here we could do a SELECT * on the movies table, and we would have enough information to programatically figure out what movie to assign Sleepy.&lt;/p&gt;
&lt;h2&gt;But we don't have to hit the database twice&lt;/h2&gt;
&lt;p&gt;We can fix this by changing our join type. If you refer to the links above on join types, you will see there is a "left outer join". This will do a join on the tables on the value specified, but even if there is no matching table on the right side of the join, we will still get a row of data from the left table. Lets try it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Shawshank&lt;/span&gt; &lt;span class="n"&gt;Redemption&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Happy&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Grumpy&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Martin&lt;/span&gt;
&lt;span class="n"&gt;Casablanca&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results are exactly the same as above except that we have a row for Shawshank and Casablanca with no corresponding reviewer. We now have enough information to programatically find a movie for Sleepy to review.&lt;/p&gt;
&lt;p&gt;Can we make the database do that too?&lt;/p&gt;
&lt;h2&gt;Yes&lt;/h2&gt;
&lt;p&gt;We can use COUNT, GROUP BY, HAVING, ORDER BY, and a database dependent RANDOM() function to have the database return just the name of a movie Sleepy should review.&lt;/p&gt;
&lt;p&gt;Lets throw COUNT and GROUP BY in there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Casablanca&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Goodfellas&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dark&lt;/span&gt; &lt;span class="n"&gt;Knight&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Shawshank&lt;/span&gt; &lt;span class="n"&gt;Redemption&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GROUP BY works by rolling up all identical values of fields after your SELECT statement, aside from variables inside aggregate functions (which COUNT is), into a single row. So instead of getting one row per movie review as before, we are getting one row per unique movie, and the corresponding reviewer variable has been converted into a count of the number of reviewers associated with each row that was grouped.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/group-by.png"&gt;&lt;/p&gt;
&lt;p&gt;GROUP BY can be confusing, in particular because depending on which fields you put after your SELECT statement and your GROUP BY clause, the results might not make any sense. The general rule is that any field coming after your SELECT statement that is not in an aggregate function (a function that takes many values and outputs one, like COUNT and SUM) must be in your GROUP BY clause as well, otherwise it either will not work, or the meaning of the query is not well defined. GROUP BY really could be its own post (and I am sure it is elsewhere).&lt;/p&gt;
&lt;p&gt;But we still don't have the database answering this question for us. Lets move that COUNT variable into a HAVING clause.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Casablanca&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Shawshank&lt;/span&gt; &lt;span class="n"&gt;Redemption&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, moving the COUNT function into the HAVING portion of our query, we are able to look at our groups before passing it up to the rest of the query. We are saying: "only create this group, if the corresponding reviewer count is less than one". As you can see, we now just have a list of movie names that no one, including Sleepy, has reviewed. It appears that in some databases you cannot refer to a field in your HAVING clause if it was not listed after your SELECT statement, so you might have to do the following (which gives me the chance to introduce the aliasing of fields in your SELECT statement using AS)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we put the COUNT function back into the select statement, alias it as C, and then refer to that in our HAVING clause. The alias here is optional, I just did it because it can be done, you can alias any field after your SELECT statement, not just functions.
It is also important to note that the HAVING portion works on things other than functions. Depending on what you are trying to accomplish it may become confusing as to whether something belongs in a HAVING clause or a WHERE clause. It comes down to where you want to perform the check (either as each row is examined, or as each group is created). I found the following link helpful:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.databasejournal.com/features/mysql/article.php/3469351/The-HAVING-and-GROUP-BY-SQL-clauses.htm"&gt;http://www.databasejournal.com/features/mysql/article.php/3469351/The-HAVING-and-GROUP-BY-SQL-clauses.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For this problem though, we definitely need the check to be in the HAVING clause, because the value of the COUNT aggregate function will not yet be defined in the WHERE clause. At the point in time the WHERE clause is being executed the database is still determining which rows are actually in our results and correspondingly, which rows the GROUP BY will be performed on. The HAVING clause allows us to perform checks on the grouped rows.&lt;/p&gt;
&lt;h2&gt;Make the database choose one row at random&lt;/h2&gt;
&lt;p&gt;So we have a query returning a list of movies that Sleepy can review. But he is not a workaholic- he only wants one job, not two. Additionally, he needs to have an equal chance of being assigned either film.
We solve the too many jobs problem by sticking a LIMIT on the end of the query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Casablanca&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This tells the database to only return 1 row from the result set. Unfortunately, every time we run this it will return the same row. We need to get it to randomly pick one of them for us. We can do this by using ORDER BY and then a database specific function. ORDER BY tells the database to return the results ordered by one of the fields. For example, we could ask it to ORDER BY movie.name, and it would always return them in alphabetical order. By using a special function (called RANDOM in SQLite and Postgres), we can have the database assign a random value to each row and then order by that value. So to bring it all together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;reviews&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviewer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleepy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;RANDOM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Shawshank&lt;/span&gt; &lt;span class="n"&gt;Redemption&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run this multiple times the result will change. That's it! See this link for database specific random functions:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.petefreitag.com/item/466.cfm"&gt;http://www.petefreitag.com/item/466.cfm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any corrections or alternative solutions?&lt;/p&gt;</content></entry><entry><title>Create a WAR file without resorting to using Eclipse</title><link href="http://jeffmax.io/create-a-war-file-without-resorting-to-using-eclipse.html" rel="alternate"></link><published>2011-04-11T05:23:56+02:00</published><updated>2011-04-11T05:23:56+02:00</updated><author><name>jeffmax</name></author><id>tag:jeffmax.io,2011-04-11:/create-a-war-file-without-resorting-to-using-eclipse.html</id><summary type="html">&lt;p&gt;How to create a WAR file without using an IDE&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I wanted to make a simple Java servlet without dealing with Eclipse (or any IDE). I have traditionally always used Eclipse to start a new Java project, and then committed whatever mess of xml and .project files the thing dumped onto my computer. This is not fun later.
I decided to use &lt;a href="http://buildr.apache.org/"&gt;Apache Buildr&lt;/a&gt;, a Java build framework which appears to be Rake mixed together with Maven.  The documentation looks promising, but it is not yet popular enough that google won't try to correct your spelling when you try searching about it.  It uses Ruby's syntax, so the build file is not XML like Ant or Maven, but it is compatible with Maven2 respositories. This means there is the chance of finding all your dependencies automatically. Not a good chance though.&lt;/p&gt;
&lt;p&gt;My project had the following requirements:&lt;/p&gt;
&lt;p&gt;1) Build against a jar from a maven repo.
2) Build against some local jars.
3) Remove at least one of the jars from the final war. This had to do with not delivering the servlet-api jar that conflicts with the one tomcat provides.
4) Include an xml file in a specific, non-standard location in the final war.&lt;/p&gt;
&lt;p&gt;First the build directory structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;buildfile &amp;lt;-- this is the buildr build file
lib/  &amp;lt;-- folder containing all dependent jars
src/main/
src/main/webapp/WEB-INF/ web.xml &amp;lt;-- war file&amp;#39;s web.xml
src/main/resources/ &amp;lt;--  various configuration files
src/main/java/ &amp;lt;-- Your java code
src/main/conf/ &amp;lt;-- Non-standard location for resource file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="http://buildr.apache.org/packaging.html#war"&gt;buildr documentation&lt;/a&gt;  explains that the  /src/main/webapp will become the root of the war, your java files will be compiled and placed at /WEB-INF/classes, and the dependent jars will be put into WEB-INF/libs.&lt;/p&gt;
&lt;p&gt;Now the buildfile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Generated by Buildr 1.4.5, change to your liking
# Version number for this release
VERSION_NUMBER = &amp;quot;1.0.0&amp;quot;
#Group identifier for your projects
GROUP = &amp;quot;SomeWar&amp;quot;
COPYRIGHT = &amp;quot;&amp;quot;
# Specify Maven 2.0 remote repositories here
repositories.remote &amp;lt;&amp;lt; &amp;quot;http://www.ibiblio.org/maven2/&amp;quot;
repositories.remote &amp;lt;&amp;lt; &amp;quot;http://repo1.maven.org/maven2/&amp;quot;

# Specifying an artifact here, Maven style
SERVLET = &amp;quot;javax.servlet:servlet-api:jar:2.4&amp;quot;

desc &amp;quot;The SomeWar Project&amp;quot;
define &amp;quot;somewar&amp;quot; do
project.version = VERSION_NUMBER
project.group = GROUP
manifest[&amp;quot;Implementation-Vendor&amp;quot;] = COPYRIGHT

# Add all the jars in your lib directory to the dependencies
compile.with Dir[_(&amp;quot;lib/*.jar&amp;quot;)]

# Go find that servlet artifact in one of those Maven repos previously specified
compile.with SERVLET

# Uncomment the line below to show what jars will be included in your war
# puts package(:war).libs.map()

# This final line says to include my.xml file at
# src/main/conf/ as new.xml
# at WEB-INF/classes/conf,
# and remove the jar specified by the SERVLET artifact
package(:war).include(&amp;quot;src/main/conf/my.xml&amp;quot;,:as=&amp;gt;&amp;#39;WEB-INF/classes/conf/new.xml&amp;#39;).libs -= artifacts(SERVLET)
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it.&lt;/p&gt;</content><category term="war file"></category><category term="java"></category></entry></feed>