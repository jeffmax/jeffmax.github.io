{"pages":[{"text":"Most of developers have had to generate a public/private key pair at one point or another. Often this is to create a certificate for a webserver, but it comes up for various reasons. Whenever I have to do this I am always extremely confused and amazed when it all works out, so in this post I am going to try to explain what is actually going on. Everything here will assume we are using RSA, which is complicated enough for one day. Caveat: I am not an expert (or even close) in cryptography. If anything is wrong in this article please use the comments section to correct me. I am very aware that wrong information in this topic is often much worse than no information at all. The Basics Using the openssl command you can do tons of stuff, so much stuff that sometimes it is very unclear what you are actually doing. Lets start with as basic as you can get. Generate an RSA public/private key pair Private Key As expained here openssl genrsa - out privatekey . pem 1024 This creates a file called privatekey.pem. This is actually kind of confusing already, because that file actually contains both your private and public key. What is this .pem file This .pem file holds your private/public keys. It is in the PEM encoding, which is a human readable version of the DER encoding (see below). If you open one, typically you will see some kind of header like -----BEGIN RSA PRIVATE KEY----- followed by a series of characters and then a footer. One file can contain a series of objects like this. The mess of characters is a base64 encoded of ASN.1. As PEM is encoding as well as used a file extension, you will sometimes see a .key or .crt or .pub file that is in PEM format. A .pem extension itself doesn't really tell us much about what is in it. A PEM encoded file can contain a private/public key pair, just a public key or an entire certificate. The one we just generated just contains a private/public key pair There are also DER files that can contain the same information except in binary format and without the headers and footers. I have run into .der files because iOS expects them. This link goes over some of the confusion points here. The openssl command can convert back and forth between this formats. DER encoding seems to be used more frequently (or perhaps all the time?) to hold certificates rather than just keys. Some .crt files are in DER format. Public Key So now we have this .pem file with a private and public key, but if you want to do anything useful with this stuff you will need to be able to share only your public key. So the following extracts your public key openssl rsa - in mykey . pem - pubout > mykey . pub This is a .pub file, but again, it's really just a PEM encoded file with only your public key. I believe the formats for these files are specified here Do something useful So at this point, you have come to a cross road. What can we do with these things? We can generate a certificate for some task. We use them directly them for some larger crypto scheme like digital signatures. Certificates Certificates are useful if you are trying to setup a server for https or just need to work within the confines of a system that works best with certificates. For example, if you wanted to use your public key on iOS, the primitive functions exposed there expect a certificate even if you don't need any kind of chain of ownership. To generate a certificate you use openssl to create a Certificate Signing Request. In our case, we have already have a private/public key pair, so you would the following command openssl req - out CSR . csr - key mykey . key - new You would then either submit this to an organization that would sign it for you, or sign it yourself to create a self-signed certificate. openssl x509 - req - days XXX in CSR . csr - signkey privatekey . pem - our server . crt Ultimately if this was your goal, you could have done everything up to now (except extract the public key) in one step: openssl req - x509 - newkey rsa : 2048 - keyout privatekey . pem - out cert . crt - days XXX See this link for a breakdown of this command and how to not require a password. iOS By the way, as mentioned briefly above, if you want to do anything involving a public/private key on iOS, you are going to want a self signed certificate in DER form. This link explains how to do this from scratch or from the .pem file we created in the first step. Keep in mind that you have a few options on iOS, but if you don't want a solution that involves bundling openssl with your app, you need the self signed der file so you can use Apple's builtin functions. If you just want to verify a signed cert, I will go over that below. Technically to use a public key on iOS you basically need to get your key into a SecKeyRef. There are various ways to do this, see here and here and this pod . If you just need to verify a signature, look at the first link. This link doesn't show how to load the certifcate, but shows both signing and verifying. You may need to tweak the functions and constants referring to SHA1 if you want to use SHA256. You can always read the Apple docs for more concrete information. Verify a signature on iOS Coming soon.. Use keys directly Without a certificate (or with one) you can still create digital signatures for documents and verify them as well as encrypt and decrypt documents. You just use your private key to sign and other people use your public key to verify the signature (or someone else encrypts a document with your public key and you decrypt it with your private key). You can do this in Python using the M2Crypto, PyCrypt or rsa libraries. One thing to keep in mind- with RSA there is usually a \"textbook\" conceptual way to do things that involves the pure math, and then the safe, blessed implementation schemes. Something that really bit me once was that PyCrypt implements both a \"textbook\" version of RSA signatures and the two official signature schemes (RSASSA-PSS and RSASSA-PKCS1-v1_5). Apparently the \"textbook\" one is not safe at all. See my comment here . The difference between the \"textbook\" version and the two official schemes has to do with extra padding (or encoding) done between hashing and signing that prevents certain types of attacks. You can see technical details of the RSASSA-PCKS1-v1_5 here . One interesting thing to note there is that scheme hashes your document with a particular hash function (that you can specify) and then encodes which hash function was used as part of the padding before it actually signs. This is why depending on the api you might need to hash your document first and then pass a symbol indicating which hash function you used to the sign or verify method. RSASSA-PKCS1-v1_5 is newer and more complex- but ultimately either is safer than naively hashing your document (with a SHA family function) and encrypting it with your RSA key (which is what I thought I could do after reading about digital signatures).","tags":"certificates","loc":"http://jeffmax.io/developer-introduction-to-rsa-keys-and-ssl-certificates.html","title":"Developer introduction to RSA keys and SSL certificates"},{"text":"I am currently enrolled in an applied statistics program. For my course I really want to use the IPython Notebook. It allows me to do the calculations and show formulas all in one document. I have been trying figure out how to use Python instead of a statistics program. The functionality is all there, but is spread across different libraries, and there are many choices when it comes to graphing. In this post I will show to do some simple statistics (mostly related to linear regression) using Python. Requirements numpy scipy pandas statsmodels matplotlib seaborn Getting data into Python Data is typically in some column-based format (either in Excel, or a tab/comma delimeted file). CSV is the easiest to import, so use Excel to export whatever you have into CSV. Then Pandas has a method to quickly get data from a CSV file into Python (into a Pandas DataFrame object). Pandas provides a lot of functionality, but at its core is the DataFrame and Series object. from pandas import DataFrame data = DataFrame . from_csv ( \"filename.csv\" , index_col = None )) The DataFrame is made up of Series objects (one for each column of your data). You can easily get to a Series by indexing into the DataFrame. data [ \"Column1\" ] The columns are basically Numpy arrays- you can easily apply an operation to every value in the column. Simple scatter plot One of the frustrating things about getting up to speed with performing statistics in Python is that there is often more than one way to accomplish something. For example, Pandas allows you to easily create a scatter plot of two variables, but you can also do this directly through Matplotlib. In general, in my limited experience, if you can avoid dropping down to matplotlib, then do so. People have spent a lot of time worrying about the details so you don't need to. Unfortunately, it is likely you will need to learn it at some point to get exactly what you want. With pandas data . plot ( x = \"Column1\" , y = \"Columns2\" , kind = \"scatter\" ) Matplotlib column1 = data [ \"Column1\" ] column2 = data [ \"Column2\" ] fig = plt . figure () axes = fig . add_axes ([ 0 , 0 , . 8 , . 8 ]) axes . scatter ( column1 , column2 , marker = \"o\" ) There are quite a few ways to accomplish the same thing in matplotlib. This is a decent place to get started: http://matplotlib.org/1.3.1/users/pyplot_tutorial.html, although it uses the Matlab style interface which I find gets confusing very fast. The alternative (and the one I used above) is the object oriented mode where you instantiate individual figure objects and operate on them instead of using a implicit global figure object. This link does a good job showing examples of both styles: http://nbviewer.ipython.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb. A tip- seaborn, which is a library for statistics visualization that uses matplotlib, will set some visual defaults for matplotlib as soon as you import it. Try importing and regenerating one of the graphs above to see the difference. import seabon as sns Simple Linear Regression Another example, you can do simple linear regression using the statsmodels library, but Pandas wraps that functionality up making it a little easier to perform when you are working with a DataFrame object. Directly through Pandas DataFrame from pandas.stats.api import ols ols ( x = data [ \"Column1\" ], y = data [ \"Column2])) Statsmodels import statsmodels.api as sm X = sm . add_constant ( data [ \"Column1\" ]) model = sm . OLS ( data [ \"Column2\" ], X ) model . fit () . summary () You can also use the statsmodel formula api to do the same thing model = ols ( 'Column2 ~ Column1' , data = data ) Residuals vs Fits Generating a graph of Residuals versus the fitted y values has come up a few times. I searched all over for a library taht does this out of the box, but could not find it. Seaborn comes close with import seaborn as sns sns . residplot ( \"Column1\" , \"Column2\" , data = data ) But unforutnately this creates a plot of residuals vs the x values. I think in many situations, this graph will tell you the same thing as residuals versis fitted values, but it is not what I was looking for. Here is how to create it with vanilla matplotlib fitted = 10 + 0.7 * data [ \"Column1\" ] # This just needs to be whatever the linear regrsssion equation is fig = plt . figure () axes = fig . add_axes ([ 0 , 0 , 1.0 , 1 , 0 ]) axes . axhline ( color = \"black\" , ls = \"--\" ) # This creates a horizon line (like abline in R) axes . set_xlabel ( 'Fitted Value' ) axes . set_ylabel ( 'Residuals' ) axes . set_title ( 'Residuals Versus Fits' ) axes . scatter ( fitted , data [ \"Column2\" ] - fitted , marker = \"o\" ) ANOVA for linear regression Not much to say here. from statsmodels.stats.anova import anova_lm from statsmodels.formula.api import ols model = ols ( 'Column2 ~ Column1' , data = data ) anova_lm ( model . fit ())","tags":"Python","loc":"http://jeffmax.io/using-python-for-statistics-coursework.html","title":"Using Python for Statistics Coursework"},{"text":"When you are writing an iOS app and have beta testers you need a method to update their devices with your latest release. Running around with a laptop and a cable will get old very fast. There are a few commercial solutions that I am sure work well, but this method is free and fairly painless. This post is a recapitulation of several posts already available on the web (see http://readwrite.com/2010/12/15/apple-best-kept-secret-how-to-do-ad-hoc-installs, http://www.paradeofrain.com/2010/11/taking-the-pain-out-of-ad-hoc-testing/, and especially http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution) but I wanted to put all the details in one place updated for the latest changes to XCode Menu names and using Github Releases. Much of this information can also be found in Apple's Documentation. This link may be useful: https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/TestingYouriOSApp/TestingYouriOSApp.html The basis tasks are: Create an adhoc profile on the Apple developer site including each beta testers device id. This creates a .mobileprovision file. Create an Archive for your application. This creates a plist file and an .ipa file. Post all three files on the internet (or an intranet). You can use Github Releases. Create a simple HTML file (see this link for the original source of this idea http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution) that the users will navigate to on their device. The HTML file will contain a link that will allow them to install the latest version of your app. Now the details: Step 1, Hang out on the Apple Developer site for a while I won't pretend to have a solid fundamental understanding of Apple's certificate/provisioning/profile setup/mess, but for this task you definitely need to create an Adhoc Provisioning Profile. This falls into the Distribution category of profiles (as opposed to Development). I am going to list what worked for me circa November 2013. Go to the \"Certificates, Identifiers & Profiles\" section of the Apple Developer site. You need a Distribution Certificate for this task. Create one under \"Certificates -> Production\". Register all your beta tester's iOS devices in the \"Devices\" section. You will need each device's UDID. You can get this by plugging the device into your Mac and opening up the Organizer in XCode (intuitively hidden under \"Windows -> Organizer\"). You need an App ID. I believe since your app is not actually going into the App Store yet you can get away with using a wild card App ID. Create this under the \"Identifiers\" section of the website. Create your Adhoc Provisioning Profile under \"Provisioning Profiles -> Distribution\". You will need to associate your Distribution Certificate, App ID, and each beta tester's device with the profile. Unfortunately this does mean you will need to generate a new one of these each time you want to add a new beta tester. I guess this is one of the reasons this method is free. You will now have a file with the .mobileprovision extension. Step 3 Archive your App In XCode, make sure you have \"iOS device\" selected in the toolbar at the top (the dropdown where you choose which device to run your App on, or which simulator). Click \"Product -> Archive\". Once that succeeds, follow the instructions in step 2 thru 6 here: http://readwrite.com/2010/12/15/apple-best-kept-secret-how-to-do-ad-hoc-installs#awesm=~onnHAUeZCe9nws. You will need to enter the URL where you intend to place the bundle for your users to download. This is because to install your application on their device, users will actually download a .plist file (created in this step), that links to the actual location of your app. As I go into detail below, I put these files on Github Releases, so the location would be something like https : //github.com/<username>/<repo-name>/releases/download/<release-tag-name>/YourApp.ipa You will get a .plist file and a .ipa file. Step 4 & 5 Put these files somewhere your users can access them and create an HTML page that links to your plist You can put these files anywhere you want, as long as people will be able to download them. Thanks to a suggestion from mitalia , I put these on our internal Github using the Releases functionality. You can also use public Github. You just create a release, and attach all three files as binary attachments and Github will store them for you. You can just post the .mobileprovision file directly on Github releases. A word of caution, I have no idea what the ramifications are of posting a provisioning profile on the public internet are, it might be advisable to make the Github repository private, or post this file elsewhere. The link that Github Releases automatically generates for files you bundle with your release will work. Just tell your users to click the link on their iOS device, and it will prompt them to install the provisioning profile on the device. Unfortunately, for installing the app itself you need a little more control over the HTML anchor element, so you need to create an HTML file that contains the properly formatted link. http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution provides a template HTML index file you can use (and a nice PHP script that makes this simpler if you are not using Github Releases), but effectively you just need to create an HTML page with a link constructed as follows that your users will click on: <a href= \"itms-services://?action=download-manifest&url=LINK_TO_YOUR_PLIST_FILE\" > Click to install </a> Again, you can post this HTML file anywhere. I actually just upload it to Github Releases the same way I upload the other files. The users will see a link to the HTML file in the attachments portion of the Release. In a normal browser clicking the link would result in downloading the file to the machine because Github Release sets the link as \"nofollow\", but in the file system averse iOS, Safari will render the HTML as if the user just clicked on a normal link. They then click the link to your PLIST and will be prompted to install your app. You can then create a new release or update this one as you need users to update the app. They will only need to install the provisioning profile once.","tags":"ios","loc":"http://jeffmax.io/distributing-ios-app-updates-to-beta-testers.html","title":"Distributing iOS App Updates to Beta Testers"},{"text":"A note on this post: I will be discussing the details to the solution of a problem that was solved by a co-worker of mine. See his blog, The Devel . SQL has always been a bit of a mystery to me. To date, my most complicated queries have been fairly simple table joins. Recently I stumbled upon a problem that I would have traditionally solved by doing two or three separate dynamically generated queries executed from a programming language like Python. My mercifully patient co-workers explained the problem could be solved with one query that uses a few more advanced SQL concepts, including: a subquery GROUP BY HAVING ORDER BY I can see versions of this problem (described below) coming up in other domains. I am going to walk through the solution in this post, from the most naive implementation up through a single query that solves the entire problem. Hopefully it will be a relatable guide to using some of SQL's interesting features. I am also posting a sample SQLite database that you can download and play with while working through the post. If you are not familiar with SQLite, it is a simple, server-less SQL database. It is very widely used and often embedded within other products (it might be running in your web browser). It is perfect for learning SQL because there is virtually no setup and it is almost impossible to break anything. To get started, download the SQLite executable and the movies.db file. Once SQLite is installed, if you open a console and navigate to the location of your downloaded movies.db file and type: sqlite3 movies . db you will be at a SQL prompt ready to go. Slightly Contrived Problem You are in charge of assigning movies to movie reviewers. You have a list of movies, and a list of reviews tagged with the reviewer. When a reviewer asks for an assignment, you must assign him or her a movie that: They have not yet reviewed. Has only been reviewed by at most N other reviewers. Of the movies that fit criteria 1 and 2, each movie is just as likely to be assigned. In summary, if we take N to be 1, you just want every movie to be reviewed by 1 reviewer, and you want every movie to have an equal chance of being reviewed. For the purpose of this post, your data is stored in a database with the following two tables: Movies Table id name length year 1 The Shawshank Redemption 2.5 1994 2 The Dark Knight 3 2008 3 Fight Club 2 1999 4 Goodfellas 2 1990 5 Casablanca 2 1942 Reviews Table id reviewer rating movie 1 Grumpy 0 4 2 Happy 5 2 3 Sleepy ? 3 4 Martin 5 4 How I would solve this with brute-force, mediocre SQL Sleepy wants his next assignment. The simplest solution to the problem is to: Do a select on the reviews table for all reviews by Sleepy. Do a select on the movies table, selecting all movies whose ids are not in the list created in step 1. Iterate through the list of movies from step 2, querying the review table for reviews for that movie. Then choose (at random) a movie whose number of reviews is < N. Lets work through this at the SQLite prompt: sqlite > SELECT * FROM reviews WHERE reviewer = 'Sleepy' ; 3 | Sleepy |?| 3 Then generate a SQL query on the movies table to grab all the movies Sleepy has not yet reviewed. sqlite > SELECT * FROM movies WHERE id NOT IN ( 3 ); 1 | The Shawshank Redemption | 2 . 5 hours | 1994 2 | The Dark Knight | 3 hours | 2008 4 | Goodfellas | 2 hours | 1990 5 | Casablanca | 2 hours | 1942 Finally, iterate through each movie returned in the previous query, constructing a query to count the number of reviews for that movie. sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 1 ; 0 sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 2 ; 1 sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 4 ; 2 sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 5 ; 0 Shawshank had no reviews, The Dark Knight had 1 review, Goodfellas had 2 reviews, and Casablanca had no reviews. If N was equal to 1, randomly choose between Shawshank and Casablanca, assigning one of them to Sleepy. All done! How can this be done better? The first step in improving this process is to introduce a subquery. We can essentially do our first two queries above in one call to the database like this: sqlite > SELECT id , name FROM movies WHERE id NOT IN ( SELECT movie FROM reviews WHERE reviewer = 'Sleepy' ); 1 | The Shawshank Redemption 2 | The Dark Knight 4 | Goodfellas 5 | Casablanca We now know the names of the movies that Sleepy has not reviewed. We could now just do step 3 above, iterating through each movie to find out how many reviews we have for each one. Brief Aside One thing I found confusing when going from trivial SQL queries to more complex problems was that by doing a SELECT from more than one table using a WHERE clause, you are doing an implicit inner join. There are quite a few different types of joins that you can actually perform. I have found the following two links helpful: Jeff Atwood explains SQL joins using Venn Diagrams and Wikipedia takes a crack at SQL join types So for example, if we wanted to do an inner join on our two tables, one way would be with the following query: sqlite > SELECT * FROM movies , reviews WHERE movies . id = reviews . movie ; 4 | Goodfellas | 2 hours | 1990 | 1 | Grumpy | 0 | 4 2 | The Dark Knight | 3 hours | 2008 | 2 | Happy | 5 | 2 3 | Fight Club | 2 hours | 1999 | 3 | Sleepy |?| 3 4 | Goodfellas | 2 hours | 1990 | 4 | Martin | 5 | 4 Here we get a row for each movie review. If there is no review, the movie is not showing up at all. This is because it did an implicit inner join. Other types of joins would produce different results. The same query using the more explicit syntax: SELECT * FROM movies INNER JOIN reviews ON ( movies . id = reviews . movie ); 4 | Goodfellas | 2 hours | 1990 | 1 | Grumpy | 0 | 4 2 | The Dark Knight | 3 hours | 2008 | 2 | Happy | 5 | 2 3 | Fight Club | 2 hours | 1999 | 3 | Sleepy |?| 3 4 | Goodfellas | 2 hours | 1990 | 4 | Martin | 5 | 4 For clarity's sake, I will use the more explicit syntax from here on out. But we can do better Let's join these two tables. So if we join these two tables on the movie id, and select only the fields we actually care about, we could write the following query: sqlite > SELECT movies . name , reviews . reviewer FROM movies INNER JOIN reviews ON ( movies . id = reviews . movie ); Goodfellas | Grumpy The Dark Knight | Happy Fight Club | Sleepy Goodfellas | Martin The above query might also be written like this SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ); Just look this over for a second and it should become clear that the M and R following the table names are aliases. Everywhere else in the query that alias is used to refer to its associated table name. You will probably see this used in the SQL wild. So we have joined our two tables and grabbed only the information we really cared about. If we add back our subquery, we get this: sqlite > SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ); Goodfellas | Grumpy The Dark Knight | Happy Goodfellas | Martin We now have one row for each movie not reviewed by Sleepy. We could almost solve this problem now without hitting the database again except for the fact that we don't have any information about movies that have no reviews. From here we could do a SELECT * on the movies table, and we would have enough information to programatically figure out what movie to assign Sleepy. But we don't have to hit the database twice We can fix this by changing our join type. If you refer to the links above on join types, you will see there is a \"left outer join\". This will do a join on the tables on the value specified, but even if there is no matching table on the right side of the join, we will still get a row of data from the left table. Lets try it sqlite > SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ); sqlite > SELECT M . name , R . reviewer FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) ; The Shawshank Redemption | The Dark Knight | Happy Goodfellas | Grumpy Goodfellas | Martin Casablanca | The results are exactly the same as above except that we have a row for Shawshank and Casablanca with no corresponding reviewer. We now have enough information to programatically find a movie for Sleepy to review. Can we make the database do that too? Yes We can use COUNT, GROUP BY, HAVING, ORDER BY, and a database dependent RANDOM() function to have the database return just the name of a movie Sleepy should review. Lets throw COUNT and GROUP BY in there. sqlite > SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ); SELECT M . name , COUNT ( R . reviewer ) FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name ; Casablanca | 0 Goodfellas | 2 The Dark Knight | 1 The Shawshank Redemption | 0 GROUP BY works by rolling up all identical values of fields after your SELECT statement, aside from variables inside aggregate functions (which COUNT is), into a single row. So instead of getting one row per movie review as before, we are getting one row per unique movie, and the corresponding reviewer variable has been converted into a count of the number of reviewers associated with each row that was grouped. GROUP BY can be confusing, in particular because depending on which fields you put after your SELECT statement and your GROUP BY clause, the results might not make any sense. The general rule is that any field coming after your SELECT statement that is not in an aggregate function (a function that takes many values and outputs one, like COUNT and SUM) must be in your GROUP BY clause as well, otherwise it either will not work, or the meaning of the query is not well defined. GROUP BY really could be its own post (and I am sure it is elsewhere). But we still don't have the database answering this question for us. Lets move that COUNT variable into a HAVING clause. sqlite > SELECT M . name FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING COUNT ( R . reviewer ) < 1 ; Casablanca The Shawshank Redemption Here, moving the COUNT function into the HAVING portion of our query, we are able to look at our groups before passing it up to the rest of the query. We are saying: \"only create this group, if the corresponding reviewer count is less than one\". As you can see, we now just have a list of movie names that no one, including Sleepy, has reviewed. It appears that in some databases you cannot refer to a field in your HAVING clause if it was not listed after your SELECT statement, so you might have to do the following (which gives me the chance to introduce the aliasing of fields in your SELECT statement using AS) sqlite > SELECT M . name , count ( R . reviewer ) AS C FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING C < 1 ; Here we put the COUNT function back into the select statement, alias it as C, and then refer to that in our HAVING clause. The alias here is optional, I just did it because it can be done, you can alias any field after your SELECT statement, not just functions. It is also important to note that the HAVING portion works on things other than functions. Depending on what you are trying to accomplish it may become confusing as to whether something belongs in a HAVING clause or a WHERE clause. It comes down to where you want to perform the check (either as each row is examined, or as each group is created). I found the following link helpful: http://www.databasejournal.com/features/mysql/article.php/3469351/The-HAVING-and-GROUP-BY-SQL-clauses.htm For this problem though, we definitely need the check to be in the HAVING clause, because the value of the COUNT aggregate function will not yet be defined in the WHERE clause. At the point in time the WHERE clause is being executed the database is still determining which rows are actually in our results and correspondingly, which rows the GROUP BY will be performed on. The HAVING clause allows us to perform checks on the grouped rows. Make the database choose one row at random So we have a query returning a list of movies that Sleepy can review. But he is not a workaholic- he only wants one job, not two. Additionally, he needs to have an equal chance of being assigned either film. We solve the too many jobs problem by sticking a LIMIT on the end of the query: sqlite > SELECT M . name , count ( R . reviewer ) AS C FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING C < 1 LIMIT 1 ; Casablanca | 0 This tells the database to only return 1 row from the result set. Unfortunately, every time we run this it will return the same row. We need to get it to randomly pick one of them for us. We can do this by using ORDER BY and then a database specific function. ORDER BY tells the database to return the results ordered by one of the fields. For example, we could ask it to ORDER BY movie.name, and it would always return them in alphabetical order. By using a special function (called RANDOM in SQLite and Postgres), we can have the database assign a random value to each row and then order by that value. So to bring it all together: sqlite > SELECT M . name , count ( R . reviewer ) AS C FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING C < 1 ORDER BY RANDOM () LIMIT 1 ; The Shawshank Redemption | 0 If you run this multiple times the result will change. That's it! See this link for database specific random functions: http://www.petefreitag.com/item/466.cfm Any corrections or alternative solutions?","tags":"ios","loc":"http://jeffmax.io/progressively-improving-a-sql-query.html","title":"Progressively Improving a SQL Query"}]}