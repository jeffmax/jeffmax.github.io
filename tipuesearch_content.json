{"pages":[{"text":"I am currently enrolled in an Applied Statistics program. So far, the courses are all designed ot use Minitab. Minitab is easy to use, but I really like to use the IPython Notebook, so I have been trying to duplicate the features of Minitab we are using in Python. The functionality is all there, but is spread across different libraries, and there are many choices when it comes to graphing. In this post I will show to do some simple statistics (mostly related to linear regression) using Python. Requirements numpy scipy pandas statsmodels matplotlib seaborn ggplot Getting data into Python For class assignments, data is typically given in some column based format (either in Excel, or a tab/comma delimeted file). CSV is the easiest to import, so use Excel to export whatever you have into CSV. Then Pandas has a method to quickly get data from a CSV file into Python (into a Pandas DataFrame object). Pandas provides a lot of functionality, but at its core is the DataFrame and Series object. from pandas import DataFrame data = DataFrame . from_csv ( \"filename.csv\" , index_col = None )) The DataFrame is made up of Series objects (one for each column of your data). You can easily get to a Series by indexing into the DataFrame. data [ \"Column1\" ] The columns are basically Numpy arrays- you can easily apply an operation to every value in the column. Simple scatter plot One of the frustrating things about getting up to speed with performing statistics in Python is that there is often more than one way to accomplish something. For example, Pandas allows you to easily create a scatter plot of two variables, but you can also do this directly through Matplotlib. In general, in my limited experience, if you can avoid dropping down to matplotlib, then do so. People have spent a lot of time worrying about the details so you don't need to. With pandas data . plot ( x = \"Column1\" , y = \"Columns2\" , kind = \"scatter\" ) Matplotlib fig = plt . figure () axes = fig . add_axes ([ 0 , 0 , . 8 , . 8 ]) axes . plot ( fitted , data [ \"DesiredHt\" ] - fitted , \"bo\" ) The \"bo\" string signifies to use a blue circular marker. There are quite a few ways to accomplish the same thing in matplotlib. This is a decent place to get started: http://matplotlib.org/1.3.1/users/pyplot_tutorial.html, although it uses the Matlab style interface which I find gets confusing very fast. The alternative (and the one I used above) is the object oriented mode where you instantiate individual figure objects and operate on them instead of using a implicit global figure object. This link does a good job showing examples of both styles: http://nbviewer.ipython.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb. Simple Linear Regression Another example, you can do simple linear regression using the statsmodels library, but Pandas wraps that functionality up making it a little easier to perform when you are working with a DataFrame object. Directly through Pandas DataFrame from pandas.stats.api import ols ols ( x = data [ \"Column1\" ], y = data [ \"Column2])) Statsmodels import statsmodels.api as sm X = sm . add_constant ( data [ \"Column1\" ]) # why is this necessary? model = sm . OLS ( data [ \"Column\" ], X )","tags":"Python","loc":"/using-python-for-statistics-coursework.html","title":"Using Python for Statistics Coursework"},{"text":"When you are writing an iOS app and have beta testers you need a method to update their devices with your latest release. Running around with a laptop and a cable will get old very fast. There are a few commercial solutions that I am sure work well, but this method is free and fairly painless. This post is a recapitulation of several posts already available on the web (see http://readwrite.com/2010/12/15/apple-best-kept-secret-how-to-do-ad-hoc-installs, http://www.paradeofrain.com/2010/11/taking-the-pain-out-of-ad-hoc-testing/, and especially http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution) but I wanted to put all the details in one place updated for the latest changes to XCode Menu names and using Github Releases. Much of this information can also be found in Apple's Documentation. This link may be useful: https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/TestingYouriOSApp/TestingYouriOSApp.html The basis tasks are: Create an adhoc profile on the Apple developer site including each beta testers device id. This creates a .mobileprovision file. Create an Archive for your application. This creates a plist file and an .ipa file. Post all three files on the internet (or an intranet). You can use Github Releases. Create a simple HTML file (see this link for the original source of this idea http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution) that the users will navigate to on their device. The HTML file will contain a link that will allow them to install the latest version of your app. Now the details: Step 1, Hang out on the Apple Developer site for a while I won't pretend to have a solid fundamental understanding of Apple's certificate/provisioning/profile setup/mess, but for this task you definitely need to create an Adhoc Provisioning Profile. This falls into the Distribution category of profiles (as opposed to Development). I am going to list what worked for me circa November 2013. Go to the \"Certificates, Identifiers & Profiles\" section of the Apple Developer site. You need a Distribution Certificate for this task. Create one under \"Certificates -> Production\". Register all your beta tester's iOS devices in the \"Devices\" section. You will need each device's UDID. You can get this by plugging the device into your Mac and opening up the Organizer in XCode (intuitively hidden under \"Windows -> Organizer\"). You need an App ID. I believe since your app is not actually going into the App Store yet you can get away with using a wild card App ID. Create this under the \"Identifiers\" section of the website. Create your Adhoc Provisioning Profile under \"Provisioning Profiles -> Distribution\". You will need to associate your Distribution Certificate, App ID, and each beta tester's device with the profile. Unfortunately this does mean you will need to generate a new one of these each time you want to add a new beta tester. I guess this is one of the reasons this method is free. You will now have a file with the .mobileprovision extension. Step 3 Archive your App In XCode, make sure you have \"iOS device\" selected in the toolbar at the top (the dropdown where you choose which device to run your App on, or which simulator). Click \"Product -> Archive\". Once that succeeds, follow the instructions in step 2 thru 6 here: http://readwrite.com/2010/12/15/apple-best-kept-secret-how-to-do-ad-hoc-installs#awesm=~onnHAUeZCe9nws. You will need to enter the URL where you intend to place the bundle for your users to download. This is because to install your application on their device, users will actually download a .plist file (created in this step), that links to the actual location of your app. As I go into detail below, I put these files on Github Releases, so the location would be something like https : //github.com/<username>/<repo-name>/releases/download/<release-tag-name>/YourApp.ipa You will get a .plist file and a .ipa file. Step 4 & 5 Put these files somewhere your users can access them and create an HTML page that links to your plist You can put these files anywhere you want, as long as people will be able to download them. Thanks to a suggestion from mitalia , I put these on our internal Github using the Releases functionality. You can also use public Github. You just create a release, and attach all three files as binary attachments and Github will store them for you. You can just post the .mobileprovision file directly on Github releases. A word of caution, I have no idea what the ramifications are of posting a provisioning profile on the public internet are, it might be advisable to make the Github repository private, or post this file elsewhere. The link that Github Releases automatically generates for files you bundle with your release will work. Just tell your users to click the link on their iOS device, and it will prompt them to install the provisioning profile on the device. Unfortunately, for installing the app itself you need a little more control over the HTML anchor element, so you need to create an HTML file that contains the properly formatted link. http://jeffreysambells.com/2010/06/22/ios-wireless-app-distribution provides a template HTML index file you can use (and a nice PHP script that makes this simpler if you are not using Github Releases), but effectively you just need to create an HTML page with a link constructed as follows that your users will click on: <a href= \"itms-services://?action=download-manifest&url=LINK_TO_YOUR_PLIST_FILE\" > Click to install </a> Again, you can post this HTML file anywhere. I actually just upload it to Github Releases the same way I upload the other files. The users will see a link to the HTML file in the attachments portion of the Release. In a normal browser clicking the link would result in downloading the file to the machine because Github Release sets the link as \"nofollow\", but in the file system averse iOS, Safari will render the HTML as if the user just clicked on a normal link. They then click the link to your PLIST and will be prompted to install your app. You can then create a new release or update this one as you need users to update the app. They will only need to install the provisioning profile once.","tags":"ios","loc":"/distributing-ios-app-updates-to-beta-testers.html","title":"\"Distributing iOS App Updates to Beta Testers\""},{"text":"A note on this post: I will be discussing the details to the solution of a problem that was solved by a co-worker of mine. See his blog, The Devel . SQL has always been a bit of a mystery to me. To date, my most complicated queries have been fairly simple table joins. Recently I stumbled upon a problem that I would have traditionally solved by doing two or three separate dynamically generated queries executed from a programming language like Python. My mercifully patient co-workers explained the problem could be solved with one query that uses a few more advanced SQL concepts, including: a subquery GROUP BY HAVING ORDER BY I can see versions of this problem (described below) coming up in other domains. I am going to walk through the solution in this post, from the most naive implementation up through a single query that solves the entire problem. Hopefully it will be a relatable guide to using some of SQL's interesting features. I am also posting a sample SQLite database that you can download and play with while working through the post. If you are not familiar with SQLite, it is a simple, server-less SQL database. It is very widely used and often embedded within other products (it might be running in your web browser). It is perfect for learning SQL because there is virtually no setup and it is almost impossible to break anything. To get started, download the SQLite executable and the movies.db file. Once SQLite is installed, if you open a console and navigate to the location of your downloaded movies.db file and type: sqlite3 movies . db you will be at a SQL prompt ready to go. Slightly Contrived Problem You are in charge of assigning movies to movie reviewers. You have a list of movies, and a list of reviews tagged with the reviewer. When a reviewer asks for an assignment, you must assign him or her a movie that: They have not yet reviewed. Has only been reviewed by at most N other reviewers. Of the movies that fit criteria 1 and 2, each movie is just as likely to be assigned. In summary, if we take N to be 1, you just want every movie to be reviewed by 1 reviewer, and you want every movie to have an equal chance of being reviewed. For the purpose of this post, your data is stored in a database with the following two tables: Movies Table id name length year 1 The Shawshank Redemption 2.5 1994 2 The Dark Knight 3 2008 3 Fight Club 2 1999 4 Goodfellas 2 1990 5 Casablanca 2 1942 Reviews Table id reviewer rating movie 1 Grumpy 0 4 2 Happy 5 2 3 Sleepy ? 3 4 Martin 5 4 How I would solve this with brute-force, mediocre SQL Sleepy wants his next assignment. The simplest solution to the problem is to: Do a select on the reviews table for all reviews by Sleepy. Do a select on the movies table, selecting all movies whose ids are not in the list created in step 1. Iterate through the list of movies from step 2, querying the review table for reviews for that movie. Then choose (at random) a movie whose number of reviews is < N. Lets work through this at the SQLite prompt: sqlite > SELECT * FROM reviews WHERE reviewer = 'Sleepy' ; 3 | Sleepy |?| 3 Then generate a SQL query on the movies table to grab all the movies Sleepy has not yet reviewed. sqlite > SELECT * FROM movies WHERE id NOT IN ( 3 ); 1 | The Shawshank Redemption | 2 . 5 hours | 1994 2 | The Dark Knight | 3 hours | 2008 4 | Goodfellas | 2 hours | 1990 5 | Casablanca | 2 hours | 1942 Finally, iterate through each movie returned in the previous query, constructing a query to count the number of reviews for that movie. sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 1 ; 0 sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 2 ; 1 sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 4 ; 2 sqlite > SELECT COUNT ( * ) FROM reviews WHERE movie = 5 ; 0 Shawshank had no reviews, The Dark Knight had 1 review, Goodfellas had 2 reviews, and Casablanca had no reviews. If N was equal to 1, randomly choose between Shawshank and Casablanca, assigning one of them to Sleepy. All done! How can this be done better? The first step in improving this process is to introduce a subquery. We can essentially do our first two queries above in one call to the database like this: sqlite > SELECT id , name FROM movies WHERE id NOT IN ( SELECT movie FROM reviews WHERE reviewer = 'Sleepy' ); 1 | The Shawshank Redemption 2 | The Dark Knight 4 | Goodfellas 5 | Casablanca We now know the names of the movies that Sleepy has not reviewed. We could now just do step 3 above, iterating through each movie to find out how many reviews we have for each one. But we can do better Let's join these two tables. One thing I found confusing when going from trivial SQL queries to more complex problems was that by doing a SELECT from more than one table using a WHERE clause, you are doing an implicit inner join. There are quite a few different types of joins that you can actually perform. I have found the following two links helpful: Jeff Atwood explains SQL joins using Venn Diagrams and Wikipedia takes a crack at SQL join types So for example, if we wanted to do an inner join on our two tables, one way would be with the following query: sql sqlite> SELECT * FROM movies, reviews WHERE movies.id = reviews.movie; 4|Goodfellas|2 hours|1990|1|Grumpy|0|4 2|The Dark Knight|3 hours|2008|2|Happy|5|2 3|Fight Club|2 hours|1999|3|Sleepy|?|3 4|Goodfellas|2 hours|1990|4|Martin|5|4 Here we get a row for each movie review. If there is no review, the movie is not showing up at all. This is because it did an implicit inner join. Other types of joins would produce different results. The same query using the more explicit syntax: sql SELECT * FROM movies INNER JOIN reviews ON (movies.id = reviews.movie); 4|Goodfellas|2 hours|1990|1|Grumpy|0|4 2|The Dark Knight|3 hours|2008|2|Happy|5|2 3|Fight Club|2 hours|1999|3|Sleepy|?|3 4|Goodfellas|2 hours|1990|4|Martin|5|4 For clarity's sake, I will use the more explicit syntax from here on out. So if we join these two tables on the movie id, and select only the fields we actually care about, we could write the following query: sqlite > SELECT movies . name , reviews . reviewer FROM movies INNER JOIN reviews ON ( movies . id = reviews . movie ); Goodfellas | Grumpy The Dark Knight | Happy Fight Club | Sleepy Goodfellas | Martin The above query might also be written like this sql SELECT M.name, R.reviewer FROM movies M INNER JOIN reviews R ON (M.id = R.movie); Just look this over for a second and it should become clear that the M and R following the table names are aliases. Everywhere else in the query that alias is used to refer to its associated table name. You will probably see this used in the SQL wild. So we have joined our two tables and grabbed only the information we really cared about. If we add back our subquery, we get this: sqlite > SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ); Goodfellas | Grumpy The Dark Knight | Happy Goodfellas | Martin We now have one row for each movie not reviewed by Sleepy. We could almost solve this problem now without hitting the database again except for the fact that we don't have any information about movies that have no reviews. From here we could do a SELECT * on the movies table, and we would have enough information to programatically figure out what movie to assign Sleepy. But we don't have to hit the database twice We can fix this by changing our join type. If you refer to the links above on join types, you will see there is a \"left outer join\". This will do a join on the tables on the value specified, but even if there is no matching table on the right side of the join, we will still get a row of data from the left table. Lets try it sqlite > SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ); sqlite > SELECT M . name , R . reviewer FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) ; The Shawshank Redemption | The Dark Knight | Happy Goodfellas | Grumpy Goodfellas | Martin Casablanca | The results are exactly the same as above except that we have a row for Shawshank and Casablanca with no corresponding reviewer. We now have enough information to programatically find a movie for Sleepy to review. Can we make the database do that too? Yes We can use COUNT, GROUP BY, HAVING, ORDER BY, and a database dependent RANDOM() function to have the database return just the name of a movie Sleepy should review. Lets throw COUNT and GROUP BY in there. sqlite > SELECT M . name , R . reviewer FROM movies M INNER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ); SELECT M . name , COUNT ( R . reviewer ) FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name ; Casablanca | 0 Goodfellas | 2 The Dark Knight | 1 The Shawshank Redemption | 0 GROUP BY works by rolling up all identical values of fields after your SELECT statement, aside from variables inside aggregate functions (which COUNT is), into a single row. So instead of getting one row per movie review as before, we are getting one row per unique movie, and the corresponding reviewer variable has been converted into a count of the number of reviewers associated with each row that was grouped. GROUP BY can be confusing, in particular because depending on which fields you put after your SELECT statement and your GROUP BY clause, the results might not make any sense. The general rule is that any field coming after your SELECT statement that is not in an aggregate function (a function that takes many values and outputs one, like COUNT and SUM) must be in your GROUP BY clause as well, otherwise it either will not work, or the meaning of the query is not well defined. GROUP BY really could be its own post (and I am sure it is elsewhere). But we still don't have the database answering this question for us. Lets move that COUNT variable into a HAVING clause. sqlite > SELECT M . name FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING COUNT ( R . reviewer ) < 1 ; Casablanca The Shawshank Redemption Here, moving the COUNT function into the HAVING portion of our query, we are able to look at our groups before passing it up to the rest of the query. We are saying: \"only create this group, if the corresponding reviewer count is less than one\". As you can see, we now just have a list of movie names that no one, including Sleepy, has reviewed. It appears that in some databases you cannot refer to a field in your HAVING clause if it was not listed after your SELECT statement, so you might have to do the following (which gives me the chance to introduce the aliasing of fields in your SELECT statement using AS) sqlite > SELECT M . name , count ( R . reviewer ) AS C FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING C < 1 ; Here we put the COUNT function back into the select statement, alias it as C, and then refer to that in our HAVING clause. The alias here is optional, I just did it because it can be done, you can alias any field after your SELECT statement, not just functions. It is also important to note that the HAVING portion works on things other than functions. Depending on what you are trying to accomplish it may become confusing as to whether something belongs in a HAVING clause or a WHERE clause. It comes down to where you want to perform the check (either as each row is examined, or as each group is created). I found the following link helpful: http://www.databasejournal.com/features/mysql/article.php/3469351/The-HAVING-and-GROUP-BY-SQL-clauses.htm For this problem though, we definitely need the check to be in the HAVING clause, because the value of the COUNT aggregate function will not yet be defined in the WHERE clause. At the point in time the WHERE clause is being executed the database is still determining which rows are actually in our results and correspondingly, which rows the GROUP BY will be performed on. The HAVING clause allows us to perform checks on the grouped rows. Make the database choose one row at random So we have a query returning a list of movies that Sleepy can review. But he is not a workaholic- he only wants one job, not two. Additionally, he needs to have an equal chance of being assigned either film. We solve the too many jobs problem by sticking a LIMIT on the end of the query: sqlite > SELECT M . name , count ( R . reviewer ) AS C FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING C < 1 LIMIT 1 ; Casablanca | 0 This tells the database to only return 1 row from the result set. Unfortunately, every time we run this it will return the same row. We need to get it to randomly pick one of them for us. We can do this by using ORDER BY and then a database specific function. ORDER BY tells the database to return the results ordered by one of the fields. For example, we could ask it to ORDER BY movie.name, and it would always return them in alphabetical order. By using a special function (called RANDOM in SQLite and Postgres), we can have the database assign a random value to each row and then order by that value. So to bring it all together: sqlite > SELECT M . name , count ( R . reviewer ) AS C FROM movies M LEFT OUTER JOIN reviews R ON ( M . id = R . movie ) WHERE M . id NOT IN ( SELECT movie FROM reviews WHERE reviews . reviewer = 'Sleepy' ) GROUP BY M . name HAVING C < 1 ORDER BY RANDOM () LIMIT 1 ; The Shawshank Redemption | 0 If you run this multiple times the result will change. That's it! See this link for database specific random functions: http://www.petefreitag.com/item/466.cfm Any corrections or alternative solutions?","tags":"ios","loc":"/progressively-improving-a-sql-query.html","title":"Progressively Improving a SQL Query"}]}